#!/bin/bash

mk_target__deps_build__apt() {
    echo "libsecp256k1-dev libcrypto++-dev"
}

mk_target__deps_runtime__apt() {
    echo "libsecp256k1-2 libcrypto++8"  #coreutils provides base64
}

mk_target__build_order__depends() {
:
}

mk_target__check_instance() {
: #    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
:    #       dest_variable               SS                  instance            network         var
}

mk_target__set_vars() {
    #---------------- subsystem
    ss_version="1.0"
    ss_test__delay="0"
    libss__set_vars
    #----------------- config
    build_config="src/scriptv/dotool.cpp"
    runtime_config=""
    tgt_path=$(tgt_path__compute)
    tgt_instance_identifier=$(tgt_instance_identifier "")
    #----------------- pub

}

mk_target__vars__echo() {
    libss__vars__echo ""
    mk_target__vars__echo__header
    cat << EOF
build_config="${build_config}"
runtime_config="${runtime_config}"
tgt_path="${tgt_path}"
tgt_instance_identifier="${tgt_instance_identifier}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

mk_target__generate_static_conf() {
    mkdir -p $(dirname ${build_config})
    cat << EOF > ${build_config}
#include "dotool.h"
using namespace std;
using namespace dotool;


EOF
}

mk_target__build_install() {
    local ss_cache_dir=$1
    local cache_dir=${ss_cache_dir}/files
    if [[ -d ${cache_dir} ]]; then
        return
    fi
    bin/build_install ${build_mode}
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 27678 Compilation failed"
        exit 1
    fi
    mkdir -p ${cache_dir}
    mv _output/* ${cache_dir}/
}

mk_target__transfer_from_cache() {
    local ss_cache_dir=$1
    local jail=$2
    local cache_dir=${ss_cache_dir}/files
    mkdir -p ${jail}/usr/local/bin
    mkdir -p ${jail}/usr/local/lib
    cp ${cache_dir}/bin/scriptv ${jail}/usr/local/bin/
    cp ${cache_dir}/lib/libscriptv.so ${jail}/usr/local/lib/
    mkdir -p ${jail}/usr/local/lib/bash/scriptv
    cp src/bash/lib/libcrypto.env ${jail}/usr/local/lib/bash/scriptv/
    echo "Files copied from ${cache_dir}/ to ${jail}/usr/local/{lib/bin}/"
}

mk_target__cleanup() { #called after for all instances and networks
:
}

mk_target__hot_upgrade__info() {
    libss__hot_upgrade__info
}

mk_target__vars__deploy() { # variables available on environment during deployment
:
}

mk_target__libfn() {
    libss__libfn
}

mk_target__steps__pre_install() {
    libss__steps__pre_install
}

mk_target__steps__post_install() {
    libss__steps__post_install
    cat << EOF
echo "created lib search path ld file: /etc/ld.so.conf.d/scriptv.conf"
echo "/usr/local/lib" > /etc/ld.so.conf.d/scriptv.conf
ldconfig
EOF
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall
    cat << EOF
echo "deleted lib search path ld file: /etc/ld.so.conf.d/scriptv.conf"
rm -f /etc/ld.so.conf.d/scriptv.conf
ldconfig
EOF
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_ports
}

mk_target__systemctl_services() {
    libss__systemctl_services
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared
}

mk_target__amend() {
    local jail="$1"
    libss__amend "${jail}" ""
}

mk_target__constructor() {
:
}

