#!/bin/bash

libstvtool__stcfg__sets() {
   echo "user"
}

libstvtool__stcfg__version() {  # <key>  <default value>
    echo "3"
}

libstvtool__convert_scpt_to_scptwei() {
    local scpt_amount=$1
    local scptwei_amount=$(echo "$scpt_amount * 1000000000000000000" | bc)
    echo $scptwei_amount
}

libstvtool__convert_scptwei_to_scpt() {
    local scptwei_amount=$1
    local scpt_amount=$(echo "scale=18; $scptwei_amount / 1000000000000000000" | bc)
    echo $scpt_amount
}

libstvtool__stcfg__on_new_version() {
    local fromversion=$1
    #if [[ "_${fromversion}" == "_1" ]]; then
        #. lib/shenv
        #. lib/stcfg.env

        #stcfg__init "libstvtool" ${datadir}/config
        #stcfg__set_value enforce_xx_ca_cert yes
    #fi
}

libstvtool__print_local_info() {
    cat << EOF
PUBLIC
--- Open TCP ports:
    * script4 governance (ledger, blockchain, consensus). ............ ${gov__p2p_listen_port}

--- URLs:
    * script4 governance json RPC backend ............................ ${gov__api_URL}
    * wallet json RPC backend ........................................ ${be_wallet_URL}

PRIVATE

--- Open TCP ports:
    * script4 local wallet ........................................... ${wallet__rpc_listen_port}
    * script4 governance json RPC backend ............................ ${gov__rpc_listen_port}

--- Endpoint URLs:
    * script4 governance json RPC backend ............................ ${gov__api_URL__local}
    * script4 local wallet json RPC backend .......................... ${wallet__api_URL__local}

EOF
}

libstvtool__get_lan_ip4() {
    ip -4 addr show | grep inet | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1
}

libstvtool__get_wan_ip4() {
    local services=(
        "https://api.ipify.org?format=text"
        "https://ifconfig.me/ip"
        "https://icanhazip.com"
        "https://ipinfo.io/ip"
    )

    # Shuffle the services array
    for ((i = ${#services[@]} - 1; i > 0; i--)); do
        j=$((RANDOM % (i + 1)))
        # Swap
        temp=${services[i]}
        services[i]=${services[j]}
        services[j]=$temp
    done

    # Iterate through the shuffled list and fetch WAN IPv4
    for service in "${services[@]}"; do
        wan_ip=$(wget -q -O - "$service" --inet4-only || curl -s -4 "$service")
        if [[ "$wan_ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            echo "$wan_ip"
            return 0
        fi
    done

    echo "Error: Unable to fetch WAN IPv4."
    return 1
}

libstvtool__validate_address() {
    local address="$1"

    # Check if the address is 42 characters long and starts with "0x"
    if [[ ${#address} -ne 42 || ${address:0:2} != "0x" ]]; then
        echo "KO 87549 Invalid address: Incorrect length or missing '0x' prefix."
        return 1
    fi

    # Check if the rest of the address contains only valid hexadecimal characters
    if [[ ! ${address:2} =~ ^[0-9a-fA-F]{40}$ ]]; then
        echo "KO 87550 Invalid address: Contains invalid characters."
        return 1
    fi
    return 0
}

libstvtool__validate_private_key() {
    local key="$1"
    # Check if the key is 64 characters long
    if [[ ${#key} -ne 64 ]]; then
        echo "Invalid: Key is not 64 characters long."
        return 1
    fi
    # Check if the key is a valid hexadecimal string
    if ! [[ $key =~ ^[0-9a-fA-F]{64}$ ]]; then
        echo "Invalid: Key contains non-hexadecimal characters."
        return 1
    fi
    # Check if the key is within the valid range: 1 to 2^256-1
    local max_key="ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
    if [[ "$key" > "$max_key" ]]; then
        echo "Invalid: Key exceeds the maximum allowable value."
        return 1
    fi
    return 0
}

# Function to validate LAN IPv4 address
libstvtool__validate_lan_ipv4() {
    local ip="$1"

    # Check if the IP matches the basic IPv4 format
    if ! [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        echo 0
        return
    fi

    # Check each octet is in the range 0-255
    IFS='.' read -r -a octets <<< "$ip"
    for octet in "${octets[@]}"; do
        if ((octet < 0 || octet > 255)); then
            echo 0
            return
        fi
    done

    # Check if the IP is in the private LAN ranges
    if [[ "$ip" =~ ^10\. ]]; then
        echo 1
        return
    elif [[ "$ip" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]]; then
        echo 1
        return
    elif [[ "$ip" =~ ^192\.168\. ]]; then
        echo 1
        return
    else
        echo 0
        return
    fi
}

# Function to validate WAN IPv4 address
libstvtool__validate_wan_ipv4() {
    local ip="$1"

    # Check if the IP matches the basic IPv4 format
    if ! [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        echo 0
        return
    fi

    # Check each octet is in the range 0-255
    IFS='.' read -r -a octets <<< "$ip"
    for octet in "${octets[@]}"; do
        if ((octet < 0 || octet > 255)); then
            echo 0
            return
        fi
    done

    # Check if the IP is in a private or reserved range
    if [[ "$ip" =~ ^10\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^192\.168\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^127\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^169\.254\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^0\. ]]; then
        echo 0
        return
    elif [[ "$ip" =~ ^255\.255\.255\.255$ ]]; then
        echo 0
        return
    fi

    # If it passes all checks, it is a WAN IP
    echo 2
    return
}

libstvtool__validate_ipv4_address() {
    local ip="$1"

    # First, check if it's a LAN IP
    lan_result=$(libstvtool__validate_lan_ipv4 "$ip")
    if [[ "$lan_result" -eq 1 ]]; then
        echo 1
        return
    fi

    # Otherwise, check if it's a WAN IP
    wan_result=$(libstvtool__validate_wan_ipv4 "$ip")
    if [[ "$wan_result" -eq 2 ]]; then
        echo 2
        return
    fi

    # If neither, it's invalid
    echo 0
    return
}

libstvtool__validate_decimal() {
    local value="$1"

    # Regular expression to match a decimal number
    # Matches:
    # - Positive or negative numbers
    # - Integers (e.g., 42, -42)
    # - Decimals (e.g., 3.14, -0.001)
    # - Optional leading zeros (e.g., 00042, 0.42)
    if [[ "$value" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
        return 0
    else
        return 1
    fi
}

libstvtool__print_ip4_addresses() {
    local wan_ip4_address=$(libstvtool__get_wan_ip4)
    if [[ "$(libstvtool__validate_ipv4_address "$wan_ip4_address")" -ne 2 ]]; then
        echo "WAN Invalid WAN IP: $wan_ip4_address"
    else
        echo "WAN ${wan_ip4_address}"
    fi
    local lan_ip4_address=$(libstvtool__get_lan_ip4)
    if [[ "$(libstvtool__validate_ipv4_address "$lan_ip4_address")" -ne 1 ]]; then
        echo "LAN Invalid LAN IP: $lan_ip4_address"
    else
        echo "LAN ${lan_ip4_address}"
    fi
}


libstvtool__bytes_to_human() {
    local bytes=$1

    # Define units and thresholds
    local units=("B" "KB" "MB" "GB" "TB" "PB" "EB")
    local factor=1024
    local scale=0

    # Loop to determine appropriate unit
    while ((bytes >= factor)) && ((scale < ${#units[@]} - 1)); do
        bytes=$((bytes * 100 / factor))  # Multiply by 100 for precision
        scale=$((scale + 1))
    done

    # Divide to get two decimal points and print result
    printf "%.2f %s\n" "$(bc <<< "scale=2; $bytes / 100")" "${units[$scale]}"
}

libstvtool__license_file() {
    if [[ -z "${tgt_instance_identifier}" ]]; then
        echo "license_db.json"
    else
        echo "license_db__${tgt_instance_identifier}.json"
    fi
}

libstvtool__fetch_licenses() {
    local temp_license_file="$(libstvtool__license_file)_"
    $curl "${b2c_URL}/download/license" \
        -H "Content-Type: application/json" \
        -o "$temp_license_file"
    if [[ $? -eq 0 ]]; then
        if [[ -f "$(libstvtool__license_file)" ]]; then
#            echo "Deleting existing $(libstvtool__license_file)"
            rm -f "$(libstvtool__license_file)"
        fi
        echo "" >> "$temp_license_file"
        mv "$temp_license_file" "$(libstvtool__license_file)"
#        echo "License saved as $(libstvtool__license_file)"
    else
        echo "Failed to fetch the new license"
        rm -f "$temp_license_file"
        return 1
    fi
}

libstvtool__ensure_license_db() {
    local file=$(libstvtool__license_file)
    if [[ ! -f $file ]]; then
        libstvtool__fetch_licenses
    fi
}

libstvtool__print_key() {
    local file=$1
    jq -r '. | "address 0x\(.address)"' $file

}

libstvtool__print_keyp() {
    local file=$1
    jq -r '. | "address 0x\(.address) private_key \(.privatekey)"' $file
}

libstvtool__print_keys() {
    local f
    for f in $(find ${wallet__configdir}/keys/plain -type f); do
        libstvtool__print_key $f
    done
}

libstvtool__print_keysp() {
    local f
    for f in $(find ${wallet__configdir}/keys/plain -type f); do
        libstvtool__print_keyp $f
    done
}

libstvtool__set_sk() {
    for f in $(find ${gov__configdir}/key/plain -type f); do
        read address__hex sk__hex < <(jq -r '"0x\(.address) 0x\(.privatekey)"' "$f")
        local keys="$(scriptv ec priv_key_hex $sk__hex)"
#echo ">>${keys}>>"
        priv=$(echo "${keys}" | grep "^priv " | awk '{ print $2 }')
        pub=$(echo "${keys}" | grep "^pub " | awk '{ print $2 }')
        addr=$(echo "${keys}" | grep "^addr " | awk '{ print $2 }')
#echo "address__hex ${address__hex}"
#echo "sk__hex ${sk__hex}"
#echo "priv $priv" 
#echo "pub $pub" 
#echo "addr $addr" 
        return
    done
    >&2 echo "KO 40119 gov address not found in ${gov__configdir}/key/plain"
    exit 1
}

libstvtool__address_sk() {
    local address=$1
    for f in $(find ${wallet__configdir}/keys/plain -type f); do
        local a="0x$(jq -r '.address' $f | xargs)"
        if [[ "${a,,}" == "${address,,}" ]]; then
            local sk=$(jq -r '.privatekey' $f | xargs)
            echo $sk
            return 0
        fi
    done
    >&2 echo "KO 65022 Address not found in wallet"
    exit 1
}

libstvtool__urlencode() {
    local value="$1"
    local encoded=""
    for ((i = 0; i < ${#value}; i++)); do  # Loop through each character in the input string
        local char="${value:i:1}"
        case "$char" in
            [a-zA-Z0-9.~_-]) # Characters that do not need encoding
                encoded+="$char"
                ;;
            *) # Encode all other characters
                encoded+=$(printf '%%%02X' "'$char")
                ;;
        esac
    done
    echo "$encoded"
}

libstvtool__new_key() {
    local output=$($scriptcli key new)
    if [[ $batch -eq 0 ]]; then
        echo "$output"
    else
        echo "address $(echo "$output" | awk '{ print $NF }')"
    fi
}

libstvtool__import_key() {
    local output=$($scriptcli key import $1)
    if [[ $batch -eq 0 ]]; then
        echo "$output"
    else
        echo "address $(echo "$output" | awk '{ print $NF }')"
    fi
}

libstvtool__convert_to_wei() {
    local amount=$1
    local wei_amount=$(echo "$amount * 1000000000000000000" | bc)
    echo $wei_amount
}

libstvtool__convert_from_wei() {
    local wei_amount=$1
    local amount=$(echo "scale=18; $wei_amount / 1000000000000000000" | bc)
    echo $amount
}

libstvtool__get_sequence() {
    local addr=$1
    local output=$($scriptcli query account --address=$addr)

    if echo "$output" | grep -q "Failed to get account details"; then
        echo 1
        return
    fi

    local sequence=$(echo "$output" | jq -r '.sequence')
    echo $((sequence + 1))
}

libstvtool__distribute_stake_trx() {
    local node_address=$1
    local recipient=$2
    local chain_id=$3

    local seq=$(libstvtool__get_sequence $node_address)
    distribute_output=$($scriptcli tx distribute_staking_reward --chain="${chain_id}" --holder="${node_address}" --beneficiary="${recipient}" --split_basis_point=10000 --seq=$seq)
    trx_hash=$(echo "$distribute_output" | grep -oP '(?<=TxHash: )\S+')
    echo $trx_hash
}

libstvtool__extract_json_value() {
    local key=$2
    echo "$1" | jq -r --arg key "$key" '.[$key]'
}

libstvtool__query_gov() {
    local args="$1"
    $curl -X POST -H 'Content-Type: application/json' -d "$args" ${gov__api_URL__local}
}

libstvtool__query_faucet() {
    local args="$1"
    local output=$($curl -X POST -H 'Content-Type: application/json' -d "$args" ${faucet_endpoint__stv})
    if [[ -z "$output" ]]; then
        >&2 echo " $curl -X POST -H 'Content-Type: application/json' -d "$args" ${faucet_endpoint__stv}"
        >&2 echo "KO 86910 No response from faucet:"
        exit 1
    fi
    echo $output
}

libstvtool__print_nodes() {
    local pfx="$1"
    local i=0
    local node_name=""
    echo -n "${pfx}"
    for (( i=0; i<nnodes; i++ )); do
        eval "node_name=\${node_${i}_name}"
        echo -n "$node_name "
    done
    echo
}

libstvtool__stcfg__user__vars() {  # <key>  <default value>
    cat << EOF
role                    "user"
user_secrets_root       "_user_secrets"
EOF
}

libstvtool__deps_runtime__apt() {
    cat << EOF
bc
realpath
EOF
}

libstvtool__init__home() {
    if [[ -z ${libstvtool__home} ]]; then
        libstvtool__home=${HOME}
    fi
    if [[ ! -d ${libstvtool__home} ]]; then
        >&2 echo "KO 15743 home dir ${libstvtool__home} doesn't exist."
        exit 1
    fi
    libstvtool__home=$(realpath ${libstvtool__home})
    libstvtool__progname="stvtool"
    user_datadir=${libstvtool__home}/.${libstvtool__progname}
    mkdir -p ${user_datadir} #TODO: fix permissions issue
    user_datadir=$(realpath ${user_datadir})
}

#libstvtool__generate_random_secret_file() {
#    cat << EOF
#version="1"
#
#EOF
#}

#libstvtool__load_secrets() {
#    local f=${user_secrets_root__abs}/dotool.env
#    if [[ ! -f $f ]]; then #secret bag is virgin. Write a random unique values.
#        mkdir -p ${user_secrets_root__abs}
#        libstvtool__generate_random_secret_file > $f
#    fi
#    . $f
#}

#libstvtool__init__secrets() {
#    if [[ -z ${user_secrets_root} ]]; then
#        >&2 echo "KO 77961 user_secrets_root is empty."
#        exit 1
#    fi
#    if [[ ! -d ${user_secrets_root} ]]; then
#        mkdir -p ${user_secrets_root}
#        if [[ $? -ne 0 ]]; then
#            >&2 echo "KO 77628 secrets drive don't exist and cannot be created. ${user_secrets_root}"
#            exit 1
#        fi
#    fi
#    user_secrets_root__abs=$(realpath ${user_secrets_root})
#    libstvtool__load_secrets
#}

libstvtool__override_dotool() {
    if [[ ! -f etc/dotool.env.ovr ]]; then
        return
    fi
    . etc/dotool.env.ovr
    let persistent=0
    if [[ -f /etc/script_tv__pinned ]]; then
        cat /etc/script_tv__pinned | grep "f /home/stv/etc/dotool.env.ovr stv stv" > /dev/null
        if [[ $? -eq 0 ]]; then
            let persistent=1
        fi
    fi
    if [[ ${persistent} -eq 0 ]]; then
        >&2 echo "KO 77845 Found conf file that will dissapear on future sw updates. Please run the following command as root to include :"
        >&2 cat << EOF
echo "f /home/stv/etc/dotool.env.ovr stv stv" >> /etc/script_tv__pinned
EOF
        exit 1
    fi
}

status0() {
    touch /tmp/xhf85904
    $scriptcli query status | grep "\".*\": .*$" | tr ',' ' ' | sed 's~": ~=~' | sed 's~[ ]*"~~' > /tmp/xhf85904
    cat /tmp/xhf85904 | grep "Failed" >/dev/null
    if [[ $? -eq 0 ]]; then
        >&2 cat /tmp/xhf85904
        >&2 echo ""
        >&2 echo "Wait for a few seconds until service is ready, then try again."
        >&2 echo -n "Continue anyway? [*|ctrl-c]: "
        read x
        address=""
        address_b58=""
        chain_id=""
        current_epoch=""
        current_hash=""
        current_height=""
        current_time=""
        eth_chain_id=""
        genesis_block_hash=""
        latest_finalized_block_epoch=""
        latest_finalized_block_hash=""
        latest_finalized_block_height=""
        latest_finalized_block_time=""
        peer_id=""
        snapshot_block_hash=""
        snapshot_block_height=""
        syncing=""
        tip_hash=""
    else
        . /tmp/xhf85904
    fi
    rm -f /tmp/xhf85904
    address_b58=${addr}
    response=$(timeout 3 $curl -S "$be_explorer_local/blocks/info_sync" 2>errors.log)
    if [[ $? -ne 0 ]]; then
        >&2 cat errors.log
        rm -f errors.log
        >&2 echo "WA 22090 There's a problem accessing explorer backend ($be_explorer_local)."
        explorer_progress_height="-1"
#        return 1
    elif [[ -z "$response" ]]; then
            >&2 echo "WA 33092 local explorer is not in sync"
            explorer_progress_height="-1"
#        return 1
    else
        explorer_progress_height="$(echo "${response}" | jq -r '.progress_height')"
    fi
    rm -f errors.log
    cat << EOF | column -t
address ${address}
address_b58 ${address_b58}
chain_id ${chain_id}
current_epoch ${current_epoch}
current_height ${current_height}
current_hash ${current_hash}
current_time ${current_time}
eth_chain_id ${eth_chain_id}
genesis_block_hash ${genesis_block_hash}
latest_finalized_block_epoch ${latest_finalized_block_epoch}
latest_finalized_block_hash ${latest_finalized_block_hash}
latest_finalized_block_height ${latest_finalized_block_height}
latest_finalized_block_time ${latest_finalized_block_time}
peer_id ${peer_id}
snapshot_block_hash ${snapshot_block_hash}
snapshot_block_height ${snapshot_block_height}
syncing ${syncing}
tip_hash ${tip_hash}
explorer_progress_height ${explorer_progress_height}
EOF
}

libstvtool__init_node() {
    . etc/dotool.env
    libstvtool__override_dotool
    curnode=${tgt_instance_identifier}
    curnetwork=${ss_network}
    let nnodes=0
    find etc/ -name "dotool__*.env" | while read -r line; do
        var=node_${nnodes}_name
        local node_name=$(echo $line | sed 's~etc/dotool__\(.*\).env~\1~')
        declare -g "node_${nnodes}_name"="$node_name"
        let nnodes+=1
    done
    if [ $nnodes -eq 0 ]; then
        let nnodes=1
        declare -g "node_0_name"="$curnode"
    fi
    script=${gov__alias__script}
    scriptcli=${wallet__alias__script}
    if [[ -z ${scriptcli} ]]; then
        >&2 echo "KO 66009 wallet__alias__script not defined. check etc/dotool.env"
        exit 1
    fi

    gov__api_URL="https://${gov__hostname}.${domain}/${gov__url_path}"              #be/L1/script4/gov
    wallet__api_URL="https://${wallet__hostname}.${domain}/${wallet__url_path}"     #be/L1/script4/wallet
    be_wallet_URL="https://${be_wallet__hostname}.${domain}/${be_wallet__url_path}" #be/wallet
    b2c_URL=${b2c_url}                                                              #be/b2c
    be_explorer_local=${explorer__api_URL__local}                                   #be/explorer

    if [[ "_${domain__trusted}" == "_yes" ]]; then
        curl="curl -s"
    else
        curl="curl -s -k"
    fi

#    status0 > /dev/null
    libstvtool__set_sk

    libstvtool__ensure_license_db

    . /usr/local/lib/bash/scriptv/libcrypto.env
    libcrypto__init "${dotool__ca_secret_dir}" "${dotool__ca_pub_dir}" "${dotool__ssl_secret_dir}" "${dotool__ssl_pub_dir}"
}

faddr() {
    local addr=$1
    if [[ "$addr" != "0x"* ]]; then
        echo "0x${addr}"
    else
        echo $addr
    fi
}

libstvtool__chnode() {
    name=$1
    if [ ! -f etc/dotool__${name}.env ]; then
        >&2 echo "KO 50492 Node ${name} doesn't exit. Available names are: $(libstvtool__print_nodes "")"
        exit 1
    fi
    pushd etc > /dev/null
        rm -f dotool.env
        ln -s dotool__${name}.env dotool.env
    popd > /dev/null
    libstvtool__init_node
    echo "Changed node. Now operating with local node $curnode"
}


libstvtool__init() {
    #Automatic updates check. Exit while updating, node down for maintende.
    if [[ -f /tmp/update_entry_point.pid ]]; then
        local pid=$(cat /tmp/update_entry_point.pid | awk '{ print $1 }')
        local t0=$(cat /tmp/update_entry_point.pid | awk '{ print $2 }')
        local t1=$(date +%s)
        local age=$((t1 - t0))
        local timeout_sec=3600 #libfn_user.env:generate_crontab
        if [ "$age" -lt "${timeout_sec}" ]; then
            psreported=$(cat /tmp/update_entry_point.pid)
            psrunning=$(ps ax | grep "${psreported} " | grep -v grep | awk '{ print $1 }')
            if [[ ! -z "$psrunning" ]]; then
                >&2 echo "KO 26011 This node is down for maintance while upgrading the software. I'll be back on business in less than a minute."
                >&2 echo "KO 26021 System update ongoing for ${age} secs. Wait until process ${psreported} ends, or outrageously delete the file /tmp/update_entry_point.pid"
                return;
            else
                >&2 echo "WA 20290 Process ${psreported} doesn't exist anymore"
            fi
        else
            >&2 echo "WA 20291 process $pid is active for more than 1 hour. ignoring the pid file."
        fi
        #"Age is greater than 1 hour."
        rm -f /tmp/update_entry_point.pid
    fi

    . lib/shenv
    . lib/stcfg.env

    let batch=0

    if [[ ! -f etc/dotool.env ]]; then
        >&2 echo "KO 66008 etc/dotool.env not found."
        exit 1
    fi

    . /etc/script_tv/system.env

    libstvtool__init__home
    stcfg__init libstvtool "${user_datadir}/config"
    #libstvtool__init__secrets

    libstvtool__init_node

}

libstvtool_cleanup() {
:
}

libstvtool__init

