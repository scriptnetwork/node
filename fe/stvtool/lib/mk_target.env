#!/bin/bash

mk_target__deps_build__apt() {
    libweb__deps_build__apt
    echo "libssl-dev libsecp256k1-dev"
}

mk_target__deps_runtime__apt() {
    libweb__deps_runtime__apt
    echo "jq bc openssl coreutils libsecp256k1-2"  #coreutils provides base64
    echo "wamerican" #domain names
}

mk_target__build_order__depends() {
    echo "fe/download os/scriptv"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance            network         var
    resolve fe_download_URL             fe/download         lon                 central         URL
    resolve oneliner                    fe/download         lon                 central         oneliner_installer__${ss_network}
    resolve wallet__alias__script       be/L1/script4       ${ss_instance}      ${ss_network}   wallet__alias__script
    resolve gov__alias__script          be/L1/script4       ${ss_instance}      ${ss_network}   gov__alias__script
    resolve eth_chain_id                be/L1/script4       ${ss_instance}      ${ss_network}   eth_chain_id
    resolve b2c_url                     be/b2c              genesis             ${ss_network}   URL
    resolve flowhale_customer_frontend_URL be/b2c           genesis             ${ss_network}   flowhale_customer_frontend_URL
    resolve fe_node_sale__url           fe/node_sale        genesis             ${ss_network}   URL
    resolve gov__hostname               be/L1/script4       ${ss_instance}      ${ss_network}   gov__hostname
    resolve gov__url_path               be/L1/script4       ${ss_instance}      ${ss_network}   gov__url_path
    resolve be_wallet__hostname         be/wallet           ${ss_instance}      ${ss_network}   hostname
    resolve be_wallet__url_path         be/wallet           ${ss_instance}      ${ss_network}   url_path
    resolve faucet_endpoint__stv        be/wallet           genesis             ${ss_network}   faucet_endpoint
    resolve faucet_endpoint__local      be/wallet           ${ss_instance}      ${ss_network}   faucet_endpoint__local
    resolve gov__configdir              be/L1/script4       ${ss_instance}      ${ss_network}   gov__configdir
    resolve wallet__configdir           be/L1/script4       ${ss_instance}      ${ss_network}   wallet__configdir

    resolve gov__p2p_listen_port        be/L1/script4       ${ss_instance}      ${ss_network}   gov__p2p_listen_port
    resolve gov__rpc_listen_port        be/L1/script4       ${ss_instance}      ${ss_network}   gov__rpc_listen_port
    resolve wallet__rpc_listen_port     be/L1/script4       ${ss_instance}      ${ss_network}   wallet__rpc_listen_port

    resolve gov__api_URL__local         be/L1/script4       ${ss_instance}      ${ss_network}   gov__api_URL__local
    resolve wallet__api_URL__local      be/L1/script4       ${ss_instance}      ${ss_network}   wallet__api_URL__local

    resolve lightning_min_stake__scpt   be/L1/script4       ${ss_instance}      ${ss_network}   lightning_min_stake__scpt
    resolve license_lightning_cost      be/L1/script4       ${ss_instance}      ${ss_network}   license_lightning_cost

    resolve validator_min_stake__scpt   be/L1/script4       ${ss_instance}      ${ss_network}   validator_min_stake__scpt
    resolve license_validator_cost      be/L1/script4       ${ss_instance}      ${ss_network}   license_validator_cost

    resolve license_amount_vn           be/L1/script4       ${ss_instance}      ${ss_network}   license_amount_vn
    resolve license_amount_ln           be/L1/script4       ${ss_instance}      ${ss_network}   license_amount_ln

    resolve explorer__api_URL__local    be/explorer         ${ss_instance}      ${ss_network}   URL__local
    resolve fe_explorer_URL             fe/explorer         ${ss_instance}      ${ss_network}   URL

    resolve r2r_b2c_b__cli__bash        be/b2c              genesis             ${ss_network}   r2r_b2c_b__cli__bash

}

mk_target__set_vars() {
    #---------------- subsystem
    ss_version="1.0"
    ss_test__delay="0"
    libss__set_vars
    #----------------- config
    build_config="dotool/env"
    runtime_config=""
    tgt_path=$(tgt_path__compute)
    tgt_instance_identifier=$(tgt_instance_identifier "")
    #----------------- pub

    if [[ "_${system__DNS__subdomain}" != "_" ]]; then
        domain="${system__DNS__subdomain}.${system__DNS__domain}"
    else
        domain="${system__DNS__domain}"
    fi
    domain__trusted="no" # yes:trusted by browsers/curl; no: disable verifications

    runtime__etc_dir="/home/${runuser}/etc${tgt_path}"

    runtime__ca_dir=${runtime__etc_dir}/ca
    runtime__ssl_dir=${runtime__etc_dir}/ssl

    runtime__ca_secret_dir=${runtime__ca_dir}/private
    runtime__ca_pub_dir=${runtime__ca_dir}/cert

    runtime__ssl_secret_dir=${runtime__ssl_dir}/private
    runtime__ssl_pub_dir=${runtime__ssl_dir}/cert

}

mk_target__vars__echo() {
    libss__vars__echo ""
    # libweb__vars__echo ""
    mk_target__vars__echo__header
    cat << EOF
build_config="${build_config}"
runtime_config="${runtime_config}"
fe_download_URL="${fe_download_URL}"
oneliner="${oneliner}"
tgt_path="${tgt_path}"
tgt_instance_identifier="${tgt_instance_identifier}"
domain="${domain}"
domain__trusted="${domain__trusted}"  # yes:trusted by browsers/curl; no: disable verifications 
b2c_url="${b2c_url}"
fe_node_sale__url="${fe_node_sale__url}"
gov__configdir="${gov__configdir}"
gov__hostname="${gov__hostname}"
gov__url_path="${gov__url_path}"
wallet__configdir="${wallet__configdir}"
be_wallet__hostname="${be_wallet__hostname}"
be_wallet__url_path="${be_wallet__url_path}"
lightning_min_stake__scpt="${lightning_min_stake__scpt}"
license_lightning_cost="${license_lightning_cost}"
validator_min_stake__scpt="${validator_min_stake__scpt}"
license_validator_cost="${license_validator_cost}"
gov__p2p_listen_port="${gov__p2p_listen_port}"
gov__rpc_listen_port="${gov__rpc_listen_port}"
wallet__rpc_listen_port="${wallet__rpc_listen_port}"
gov__api_URL__local="${gov__api_URL__local}"
wallet__api_URL__local="${wallet__api_URL__local}"
faucet_endpoint__stv="${faucet_endpoint__stv}"
faucet_endpoint__local="${faucet_endpoint__local}"
license_amount_vn="${license_amount_vn}"
license_amount_ln="${license_amount_ln}"
explorer__api_URL__local="${explorer__api_URL__local}"
fe_explorer_URL="${fe_explorer_URL}"

runtime__etc_dir="${runtime__etc_dir}"

runtime__ca_dir="${runtime__ca_dir}"
runtime__ssl_dir="${runtime__ssl_dir}"

runtime__ca_secret_dir="${runtime__ca_secret_dir}"
runtime__ca_pub_dir="${runtime__ca_pub_dir}"

runtime__ssl_secret_dir="${runtime__ssl_secret_dir}"
runtime__ssl_pub_dir="${runtime__ssl_pub_dir}"

r2r_b2c_b__cli__bash="${r2r_b2c_b__cli__bash}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

mk_target__generate_static_conf() {
    mkdir -p $(dirname ${build_config})
    # Multi node: e.g.
    #   tgt_instance_identifier="mainnet_genesis"
    #   tgt_path="/mainnet/genesis"
    # Mono node:
    #   tgt_instance_identifier=""
    #   tgt_path=""

    cat << EOF > ${build_config}
tgt_instance_identifier="${tgt_instance_identifier}"
tgt_path="${tgt_path}"
ss_network="${ss_network}"
ss_instance="${ss_instance}"

gov__configdir="${gov__configdir}"
gov__alias__script="${gov__alias__script}"
gov__hostname="${gov__hostname}"
gov__url_path="${gov__url_path}"

wallet__configdir="${wallet__configdir}"
wallet__alias__script="${wallet__alias__script}"
be_wallet__hostname="${be_wallet__hostname}"
be_wallet__url_path="${be_wallet__url_path}"

updates_1liner="${oneliner}"
chain_id="${ss_network}"
eth_chain_id=${eth_chain_id}
domain="${domain}"
domain__trusted="${domain__trusted}"  # yes:trusted by browsers/curl; no: disable verifications 
b2c_url="${b2c_url}"
fe_node_sale__url="${fe_node_sale__url}"
flowhale_customer_frontend_URL="${flowhale_customer_frontend_URL}"

gov__p2p_listen_port="${gov__p2p_listen_port}"
gov__rpc_listen_port="${gov__rpc_listen_port}"
wallet__rpc_listen_port="${wallet__rpc_listen_port}"
gov__api_URL__local="${gov__api_URL__local}"
wallet__api_URL__local="${wallet__api_URL__local}"

faucet_endpoint__stv="${faucet_endpoint__stv}"
faucet_endpoint__local="${faucet_endpoint__local}"

lightning_min_stake__scpt="${lightning_min_stake__scpt}"
license_lightning_cost="${license_lightning_cost}"
validator_min_stake__scpt="${validator_min_stake__scpt}"
license_validator_cost="${license_validator_cost}"

license_amount_vn="${license_amount_vn}"
license_amount_ln="${license_amount_ln}"

explorer__api_URL__local="${explorer__api_URL__local}"
fe_explorer_URL="${fe_explorer_URL}"

dotool__etc_dir="${runtime__etc_dir}"

dotool__ca_secret_dir="${runtime__ca_secret_dir}"
dotool__ca_pub_dir="${runtime__ca_pub_dir}"
dotool__ssl_secret_dir="${runtime__ssl_secret_dir}"
dotool__ssl_pub_dir="${runtime__ssl_pub_dir}"

EOF
}

mk_target__build_install() {
    local ss_cache_dir=$1
    local cache_dir=${ss_cache_dir}/files
    if [[ -d ${cache_dir} ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 27678 Compilation failed"
        exit 1
    fi
    mkdir -p ${cache_dir}
    runuser_output=_runuser
    echo "copying files from ${runuser_output} to ${cache_dir}/"
    echo "runtime:=>>>>>>>>>>>>>>${runuser_output}"
    echo "cache_dir:=>>>>>>>>>>>>>>${cache_dir}"
    cp ${runuser_output}/.bashrc ${cache_dir}/
    cp -R ${runuser_output}/* ${cache_dir}/
}

mk_target__transfer_from_cache() {
    local ss_cache_dir=$1
    local jail=$2
    local cache_dir=${ss_cache_dir}/files
    mkdir -p ${jail}/home/${runuser}/bin
    mkdir -p ${jail}/home/${runuser}/lib
    mkdir -p ${jail}/home/${runuser}/etc
    mkdir -p ${jail}/home/${runuser}/doc/
    cp ${cache_dir}/bin/* ${jail}/home/${runuser}/bin/
    cp ${cache_dir}/lib/* ${jail}/home/${runuser}/lib/
    cp ${r2r_b2c_b__cli__bash} ${jail}/home/${runuser}/lib/
    rm -f /tmp/dotool.env
    if [[ "_${tgt_instance_identifier}" != "_" ]]; then
        if [[ -f ${jail}/home/${runuser}/etc/dotool.env ]]; then #save symlink
              mv ${jail}/home/${runuser}/etc/dotool.env /tmp/
        fi
    fi
    cp ${cache_dir}/etc/* ${jail}/home/${runuser}/etc/
    cp ${cache_dir}/doc/* ${jail}/home/${runuser}/doc/
    if [[ "_${tgt_instance_identifier}" != "_" ]]; then
        mv ${jail}/home/${runuser}/etc/dotool.env ${jail}/home/${runuser}/etc/dotool__${tgt_instance_identifier}.env
        if [[ -f /tmp/dotool.env ]]; then #symlink existed, restore it
            mv /tmp/dotool.env ${jail}/home/${runuser}/etc/ 
        else #1st SS, create symlink
            pushd ${jail}/home/${runuser}/etc/ > /dev/null
                ln -s dotool__${tgt_instance_identifier}.env dotool.env    #first allocated instance becomes the default for stvtool
            popd > /dev/null
        fi
    fi
    cat ${cache_dir}/.bashrc >> ${jail}/home/${runuser}/.bashrc
    cp src/root_stv ${jail}/usr/local/bin/stv
    chmod +x ${jail}/usr/local/bin/stv

    echo "Files copied from ${cache_dir}/ to ${jail}/home/${runuser}"
}

mk_target__cleanup() { #called after for all instances and networks
    local jail=$1
    echo "alias stv=bin/stvtool" >> ${jail}/home/${runuser}/.bashrc  #login shells (su)
    echo "alias stvtool=bin/stvtool" >> ${jail}/home/${runuser}/.bashrc
#    don't allow sudo to stv user. it's a SEC issue in case a hacker gains shell (all daemons run as user stv)
#    mkdir -p ${jail}/etc/sudoers.d
#    echo "${runuser} ALL=(ALL:ALL) NOPASSWD: ALL" > ${jail}/etc/sudoers.d/script_tv

    cat << EOF >> ${jail}/home/${runuser}/.bash_profile   #interactive shells (su -)
if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi

EOF
}

mk_target__hot_upgrade__info() {
    libss__hot_upgrade__info
    #preserve-runtime_dir    chown-user chown-grp
    echo "d /home/${runuser}/txlog ${runuser} ${runuser}"
    echo "d ${runtime__ca_dir} ${runuser} ${runuser}"
    echo "d ${runtime__ssl_dir} ${runuser} ${runuser}"
}

mk_target__vars__deploy() { # variables available on environment during deployment
:
}

mk_target__libfn() {
    libss__libfn
}

mk_target__steps__pre_install() {
    libss__steps__pre_install
}

mk_target__steps__post_install() {
    libss__steps__post_install
#    cat << EOF
#chown root:root /etc/sudoers.d -R
#EOF
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_ports
}

mk_target__systemctl_services() {
    libss__systemctl_services
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared
}

mk_target__libweb_info() {
:
}

mk_target__amend() {
    local jail="$1"
    libss__amend "${jail}" ""
}

mk_target__constructor() {
:
}

