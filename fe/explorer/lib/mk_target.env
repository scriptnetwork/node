#!/bin/bash

mk_target__deps_build__apt() {
    libweb__deps_build__apt
    echo "npm"
}

mk_target__deps_runtime__apt() {
    libweb__deps_runtime__apt
}

mk_target__build_order__depends() {
    echo "be/explorer"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance            network         var
    resolve bridge_eth__URL             be/L1/bridge_eth    ${ss_instance}      ${ss_network}   URL
    resolve chain_id_num                be/L1/bridge_eth    ${ss_instance}      ${ss_network}   chain_id_num
    resolve be_explorer__URL            be/explorer         ${ss_instance}      ${ss_network}   URL
    resolve fe_wallet__URL              fe/wallet           ${ss_instance}      ${ss_network}   URL
    resolve be_wallet__URL              be/wallet           ${ss_instance}      ${ss_network}   URL
    resolve fe_main__URL                fe/main             lon                 central         URL
    resolve fe_doc__URL                 fe/doc              lon                 central         URL
    resolve fe_token_URL                fe/token            lon                 central         URL
    resolve fe_status_URL               fe/status           lon                 central         URL
    resolve fe_presale_URL              fe/presale          lon                 central         URL
    resolve fe_download_URL             fe/download         lon                 central         URL
    resolve fe_dev_URL                  fe/dev              lon                 central         URL
    resolve be_b2c__URL                 be/b2c              ${ss_instance}      ${ss_network}   URL

}

mk_target__set_vars() {
    #----------------- subsystem
    ss_version="3.0"
    ss_test__delay="0"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #-------------------- cross_subsystem
    partners_endpoint__URL="https___partners_script_tv"
    nodemonitor_endpoint__URL="https___nodemonitor_script_tv"
    whitepaper_endpoint__URL="${fe_doc__URL}"
    market_api_URL="https://api.coingecko.com/api"

    #---------------------- config
    build_config="dotool/index.js"

    #---------------------- libweb
    webmode="static"                                                        
    hostname="$(p2p_hostname_rewrite explorer)"
    url_path=""
    libweb__set_vars "" "${webmode}" "" "" "${hostname}" "${url_path}"

    #------------------------- pub
    URL="$(liburl__peek URL)"
    htdocs=$(libweb__target_htdocsdir)

    #----------------- google_tag
    if [ -z "$google_tag_id" ]; then
        google_tag__URL=""
    else
        google_tag__URL="https://data.script.tv/ns.html?id=${google_tag_id}"
    fi
}

mk_target__vars__echo() {
    libss__vars__echo
    libweb__vars__echo
    mk_target__vars__echo__header
    cat << EOF
fe_token_URL="${fe_token_URL}"
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
bridge_eth__URL="${bridge_eth__URL}"
be_explorer__URL="${be_explorer__URL}"
fe_wallet__URL="${fe_wallet__URL}"
fe_main__URL="${fe_main__URL}"
fe_presale_URL="${fe_presale_URL}"
fe_dev_URL="${fe_dev_URL}"
fe_download_URL="${fe_download_URL}"
whitepaper_endpoint__URL="${whitepaper_endpoint__URL}"
htdocs="${htdocs}"
build_config="${build_config}"
webmode="${webmode}"
hostname="${hostname}"
url_path="${url_path}"
URL="${URL}"
google_tag__URL="${google_tag__URL}"
be_b2c__URL="${be_b2c__URL}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF
google_tag_id="${google_tag_id}"

EOF
}

mk_target__secrets__init() {
    google_tag_id=""
}
# -/------------------- secrets

mk_target__generate_static_conf__body() {
   libss__export_dotool__javascript
    cat << EOF
   bridge_eth__URL: "${bridge_eth__URL}",
   chain_id: "${ss_network}",
   chain_id_num: "${chain_id_num}",
   be_explorer__URL: "${be_explorer__URL}",
   fe_wallet__URL: "${fe_wallet__URL}",
   be_wallet__URL: "${be_wallet__URL}",
   fe_main__URL: "${fe_main__URL}",
   fe_token_URL: "${fe_token_URL}",
   partners_endpoint__URL: "${partners_endpoint__URL}",
   fe_status_URL: "${fe_status_URL}",
   fe_presale_URL: "${fe_presale_URL}",
   fe_dev_URL: "${fe_dev_URL}",
   fe_download_URL: "${fe_download_URL}",
   nodemonitor_endpoint__URL: "${nodemonitor_endpoint__URL}",
   whitepaper_endpoint__URL: "${whitepaper_endpoint__URL}",
   market_api_URL: "${market_api_URL}",
   system_version: "${system_version}",
   google_tag__URL: "${google_tag__URL}",
   be_b2c__URL: "${be_b2c__URL}",
EOF
}

mk_target__generate_static_conf__doc() {
    echo "export const dotool = {"
    mk_target__generate_static_conf__body
    echo "}"
    echo "export default dotool;"
}

mk_target__generate_static_conf() {
    echo "## build_config ###########################################"
    echo "## file: ${build_config}"
    echo "###########################################################"
    mkdir -p $(dirname ${build_config})
    mk_target__generate_static_conf__doc | tee ${build_config}  | sed "s~\(.*\)~## \1~"
    echo "###########################################################"
    echo
}

set_cache_dir() {
    local ss_cache_dir=$1
    ## the active line should be A. A=compiling once for 2 networks. B=Double-compiling. 
#    cachedir=${ss_cache_dir}                             # A: reuse compilation for mainnet and testnet (requires app.js to read external file with URLs)
    cachedir=${ss_cache_dir}/${ss_network}/${ss_instance}               # B: to build per/network/instance
}

mk_target__build_install() {
    set_cache_dir $1
    if [[ -d ${cachedir}/files ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 27678 Compilation failed"
        exit 1
    fi
    mkdir -p ${cachedir}/files
    cp -R public/* ${cachedir}/files/
}

mk_target__transfer_from_cache() {
    set_cache_dir $1
    local jail=$2
    mkdir -p ${jail}/${htdocs}
    cp -R ${cachedir}/files/* ${jail}/${htdocs}/

    libweb__gen_site ${jail} ""
}

mk_target__libfn() {
    libss__libfn
    libweb__libfn
}

mk_target__steps__pre_install() {
    libss__steps__pre_install
    libweb__steps__pre_install
}

mk_target__steps__post_install() {
    libss__steps__post_install
    libweb__steps__post_install
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall
    libweb__steps__pre_uninstall
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall
    libweb__steps__post_uninstall
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_ports
    libweb__declare_listening_tcp_ports
}

mk_target__systemctl_services() {
    libss__systemctl_services
    libweb__systemctl_services
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared
    libweb__systemctl_services__shared
}

mk_target__libweb_info() {
    libweb__info ""
}

mk_target__amend() {
    local jail="$1"
    libss__amend "${jail}" ""
    libweb__amend "${jail}" ""
}

mk_target__constructor() {
    . /usr/local/lib/dtool/mk_target/libbuild_web.env
    libweb__constructor
}

