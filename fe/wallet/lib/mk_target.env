#!/bin/bash

mk_target__deps_build__apt() {
    libweb__deps_build__apt
    echo "npm"
}

mk_target__deps_runtime__apt() {
    libweb__deps_runtime__apt
}

mk_target__build_order__depends() {
    echo "be/wallet"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance            NETWORK         var
    resolve BE_WALLET_URL               be/wallet           ${ss_instance}      ${ss_network}   URL
    resolve NODE_ADDRESS                be/wallet           ${ss_instance}      ${ss_network}   admin__address
    resolve BE_EXPLORER_URL             be/explorer         ${ss_instance}      ${ss_network}   URL
    resolve gov__api_URL                be/L1/script4       ${ss_instance}      ${ss_network}   gov__api_URL
    resolve FE_EXPLORER__URL            fe/explorer         ${ss_instance}      ${ss_network}   URL
    resolve FE_DOC_URL                  fe/doc              central             lon             URL
}

mk_target__set_vars() {
    #---------------- subsystem
    ss_version="1.0"
    ss_test__delay="0"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars
    
    #----------------- config
    build_config="src/dotool/index.js"
    
    #----------------- libweb
    webmode="static"
    hostname="$(p2p_hostname_rewrite wallet)"
    url_path=""
    libweb__set_vars "" "${webmode}" "" "" "${hostname}" "${url_path}"
    
    #----------------- pub
    htdocs=$(libweb__target_htdocsdir)
    URL="$(liburl__peek URL)"
    
    #----------------- google_tag
    if [ -z "$google_tag_id" ]; then
        google_tag__URL=""
    else
        google_tag__URL="https://data.script.tv/ns.html?id=${google_tag_id}"
    fi

}

mk_target__vars__echo() {
    libss__vars__echo ""
    libweb__vars__echo ""
    mk_target__vars__echo__header
    cat << EOF
google_tag__URL="${google_tag__URL}"
gov__api_URL="${gov__api_URL}"
BE_WALLET_URL="${BE_WALLET_URL}"
NODE_ADDRESS="0x${NODE_ADDRESS}"
BE_EXPLORER_URL="${BE_EXPLORER_URL}"
FE_EXPLORER__URL="${FE_EXPLORER__URL}"
FE_DOC_URL="${FE_DOC_URL}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF
google_tag_id="${google_tag_id}"

EOF
}

mk_target__secrets__init() {
    google_tag_id=""
}
# -/------------------- secrets

mk_target__generate_static_conf__body() {
    libss__export_dotool__javascript
    cat << EOF
    google_tag__URL: "${google_tag__URL}",
    BE_WALLET_URL: "${BE_WALLET_URL}",
    NODE_ADDRESS: "0x${NODE_ADDRESS}",
    BE_EXPLORER_URL: "${BE_EXPLORER_URL}",
    NETWORK: "${ss_network}",
    NODE_RPC_URL: "${gov__api_URL}",
    FE_EXPLORER__URL: "${FE_EXPLORER__URL}",
    FE_DOC_URL: "${FE_DOC_URL}",
EOF
}

mk_target__generate_static_conf__doc() {
    echo "export const dotool = {"
    mk_target__generate_static_conf__body
    echo "}"
    echo "export default dotool;"
}


mk_target__generate_static_conf() {
echo "## build_config ###########################################"
echo "## file: ${build_config}"
echo "###########################################################"
mkdir -p $(dirname ${build_config})
mk_target__generate_static_conf__doc | tee ${build_config} | sed "s~\(.*\)~## \1~"
echo "###########################################################"
echo
}

set_cache_dir() {
    local ss_cache_dir=$1
    ## the active line should be A. A=compiling once for 2 networks. B=Double-compiling. 
#    cachedir=${ss_cache_dir}                             # A: reuse compilation for mainnet and testnet (requires app.js to read external file with URLs)
    cachedir=${ss_cache_dir}/${ss_network}/${ss_instance}               # B: to build per/network/instance
}

mk_target__build_install() {
    set_cache_dir $1
    if [[ -d ${cachedir}/files ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 77678 Compilation failed"
        exit 1
    fi
    mkdir -p ${cachedir}/files
    cp -R build/* ${cachedir}/files/
}

mk_target__transfer_from_cache() {
    set_cache_dir $1
    local jail=$2
    mkdir -p ${jail}/${htdocs}
    cp -R ${cachedir}/files/* ${jail}/${htdocs}/
    libweb__gen_site ${jail} ""
}

mk_target__libfn() {
    libss__libfn
    libweb__libfn
}

mk_target__steps__pre_install() {
    libss__steps__pre_install
    libweb__steps__pre_install
}

mk_target__steps__post_install() {
    libss__steps__post_install
    libweb__steps__post_install
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall
    libweb__steps__pre_uninstall
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall
    libweb__steps__post_uninstall
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_ports
    libweb__declare_listening_tcp_ports
}

mk_target__systemctl_services() {
    libss__systemctl_services
    libweb__systemctl_services
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared
    libweb__systemctl_services__shared
}

mk_target__libweb_info() {
    libweb__info ""
}

mk_target__amend() {
    local jail="$1"
    libss__amend "${jail}" ""
    libweb__amend "${jail}" ""
}

mk_target__constructor() {
    . /usr/local/lib/dtool/mk_target/libbuild_web.env
    libweb__constructor
}

