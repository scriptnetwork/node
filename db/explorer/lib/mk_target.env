#!/bin/bash

mk_target__deps_build__apt() {
    libss__deps_build__apt
    libmongod__deps_build__apt
    libsystemd__deps_build__apt
    echo "npm"
}

mk_target__deps_runtime__apt() {
    libss__deps_runtime__apt
    libmongod__deps_runtime__apt
    libsystemd__deps_runtime__apt
    echo "nodejs"
}

mk_target__build_order__depends() {
    echo "be/L1/script4"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance           network         var          
    resolve gov__server_name            be/L1/script4       ${ss_instance}     ${ss_network}   gov__server_name
    resolve gov__rpc_listen_port        be/L1/script4       ${ss_instance}     ${ss_network}   gov__rpc_listen_port
    resolve gov__chainID                be/L1/script4       ${ss_instance}     ${ss_network}   gov__chainID
    resolve wallet__api_URL             be/L1/script4       ${ss_instance}     ${ss_network}   wallet__api_URL
    resolve gov__svcname                be/L1/script4       ${ss_instance}     ${ss_network}   gov__svcname
    resolve gov__api_URL__local         be/L1/script4       ${ss_instance}     ${ss_network}   gov__api_URL__local
}

mk_target__set_vars() {
    #---------------------------subsystem
    ss_version="1.0"
    ss_test__delay="0"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #----------------------- daemon__crawler {
    crawler__daemon_name=""
    crawler__build_config_file="dotool.js"
    crawler__libdir="$(std_path__svr)"
    crawler__configdir="${crawler__libdir}"
    crawler__runtime_config_file="config.cfg"
    crawler__bindir="${crawler__libdir}"
    crawler__logdir="$(std_path__var_log)"
    crawler__bin_daemon="run.js"
    if [[ "_${build_mode}" == "_debug" ]]; then  #loglevel possible values: error warn info verbose debug
        crawler__log_levels="debug"
    else
        crawler__log_levels="*error"
    fi
    crawler__workdir="${crawler__libdir}"
    crawler__exec_line="node ${crawler__bin_daemon}"
    crawler__after_svc="${gov__svcname}"

    #-----------------------------systemd__crawler
    libsystemd_input__workdir="${crawler__workdir}"
    libsystemd_input__exec_line="${crawler__exec_line}"
    libsystemd_input__after_svc="${crawler__after_svc}"
    libsystemd__set_vars "${crawler__daemon_name}"

    #----------------------------- config__crawler
    nodeCache__enabled=false
    blockchain__network_id="${gov__chainID}"
    blockchain__start_height=1          #this value is overwritten by crawler matching the L1 snapshot height. Only full Nodes (snapshot 0) have the whole history
    accounting__coinmarketcap_api_key="${coinmarketcap_api_key}"
    accounting__wallet_address__1="2416"
    accounting__wallet_address__2="3822"
    redis__enabled=false
    redis__isCluster=false
    redis__host=127.0.0.1
    redis__port=6379
    redis__password=
    redis__family=
    redis__db=0
    maxBlockPerCrawl=2

    #-------------------------- ports__crawler {
    #local crawler__listen_port__testnet=11300
    #local crawler__listen_port__mainnet=12300;
    #local var="crawler__listen_port__${ss_network}";
    #crawler__listen_port="${!var}"

    #---------------------- mongo {
    tgt_instance_identifier="$(tgt_instance_identifier "")"
    if [[ "_${tgt_instance_identifier}" == "_" ]]; then
        db__name="${system_unix_name}__${ss_network}"   #compatibility with production db name
    else
        db__name="${system_unix_name}__${tgt_instance_identifier}"  #distinct instances had common dbname, bad thing
    fi
    db__role=""
    db__passphrase=""
    db__listen_port=$(reserve_port)  # reserve the port in case we turn to use a separate daemon
    db__listen_port=9900   #since it's a shared daemon we use common port instead (deployments single machine will share the daemon)
    libmongod__set_vars "${crawler__daemon_name}" "${db__listen_port}" "${db__name}" "${db__role}" "${db__passphrase}"

    #---------------------- pub {
    crawler__svcname="$(libsystemd__peek svc__svcname)"
    db__bind_ip=${libmongod__bind_ip}
    db__endpoint=${libmongod__endpoint}
}

mk_target__vars__echo() {
    libss__vars__echo "${crawler__daemon_name}"
    libsystemd__vars__echo "${crawler__daemon_name}"
    libmongod__vars__echo "${crawler__daemon_name}"

    mk_target__vars__echo__header
    cat << EOF
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
gov__server_name="${gov__server_name}"
gov__rpc_listen_port="${gov__rpc_listen_port}"
gov__chainID="${gov__chainID}"
wallet__api_URL="${wallet__api_URL}"
gov__svc__svcname="${gov__svc__svcname}"
crawler__daemon_name="${crawler__daemon_name}"
crawler__libdir="${crawler__libdir}"
crawler__configdir="${crawler__configdir}"
crawler__build_config_file="${crawler__build_config_file}"
crawler__runtime_config_file="${crawler__runtime_config_file}"
crawler__bindir="${crawler__bindir}"
crawler__logdir="${crawler__logdir}"
crawler__bin_daemon="${crawler__bin_daemon}"
crawler__log_levels="${crawler__log_levels}"
crawler__workdir="${crawler__workdir}"
crawler__exec_line="${crawler__exec_line}"
crawler__after_svc="${crawler__after_svc}"
nodeCache__enabled="${nodeCache__enabled}"
blockchain__network_id="${blockchain__network_id}"
blockchain__start_height="${blockchain__start_height}"
accounting__coinmarketcap_api_key="${accounting__coinmarketcap_api_key}"
accounting__wallet_address__1="${accounting__wallet_address__1}"
accounting__wallet_address__2="${accounting__wallet_address__2}"
redis__enabled="${redis__enabled}"
redis__isCluster="${redis__isCluster}"
redis__host="${redis__host}"
redis__port="${redis__port}"
redis__password="${redis__password}"
redis__family="${redis__family}"
redis__db="${redis__db}"
maxBlockPerCrawl="${maxBlockPerCrawl}"
libsystemd_input__workdir="${libsystemd_input__workdir}"
libsystemd_input__exec_line="${libsystemd_input__exec_line}"
libsystemd_input__after_svc="${libsystemd_input__after_svc}"
db__name="${db__name}"
db__role="${db__role}"
db__passphrase="${db__passphrase}"
db_listen_port="${db_listen_port}"
gov__api_URL__local="${gov__api_URL__local}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF
#mongo - secrets
db__user="${db__user}"
db__passphrase="${db__passphrase}"

#crawler - secrets
coinmarketcap_api_key="${coinmarketcap_api_key}"

EOF
}

mk_target__secrets__init() {
    #mongo - secrets
    db__user="explorer"
    db__passphrase="$(libsecrets__random_value 16)"
    #crawler - secrets
    coinmarketcap_api_key="$(libsecrets__random__api_key1)"
}
# -/------------------- secrets

mk_target__generate_static_conf() {
    ## dotool interface
    echo "## crawler__build_config_file #############################"
    echo "## file: ${crawler__build_config_file}"
    echo "###########################################################"

    cat << EOF | tee ${crawler__build_config_file} | sed "s~\(.*\)~## \1~"
const dotool = {
    gov__api_URL__local: "${gov__api_URL__local}",
}

module.exports = dotool;

EOF

}

mk_target__build_install() {
    local ss_cache_dir=$1
    local jail=$2  # Assuming jail is a variable you intended to pass as an argument
    if [[ -d ${ss_cache_dir}/files ]]; then
        return
    fi
    bin/build_install 2>&1 #TODO: see L1
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 27678 Compilation failed"
        exit 1
    fi
    mkdir -p ${ss_cache_dir}/files/
    mv node_modules ${ss_cache_dir}/files/
    cp -R api ${ss_cache_dir}/files/
    cp -R helper ${ss_cache_dir}/files/
    cp -R jobs ${ss_cache_dir}/files/
    cp -R libs ${ss_cache_dir}/files/
    cp run.js ${ss_cache_dir}/files/
    cp waitSync.js ${ss_cache_dir}/files/
#    cp makefile ${ss_cache_dir}/files/
    $cp_pres package.json ${ss_cache_dir}/files/
    cp retrieve-token.js ${ss_cache_dir}/files/
    cp retrieve-token.summary.js ${ss_cache_dir}/files/
    cp scpt-balance-height.json ${ss_cache_dir}/files/
    make clean
}

gen_runtime_config__crawler0() {
    cat << EOF
{
    "mongo": {
        "uri": "${libmongod__endpoint}",
        "address": "${libmongod__bind_ip}",
        "port": ${libmongod__listen_port},
        "dbName": "${libmongod__dbname}"
    },
    "node": {
        "address": "127.0.0.1",
        "port": ${gov__rpc_listen_port}
    },
    "log": {
        "level": "${crawler__log_levels}"
    },
    "blockchain": {
        "network_id": "${blockchain__network_id}",
        "start_height": ${blockchain__start_height}
    },
    "accounting": {
        "coinmarketcap_api_key": "${accounting__coinmarketcap_api_key}",
        "wallet_addresses": [
            "${accounting__wallet_address__1}",
            "${accounting__wallet_address__2}"
        ]
    },
    "redis": {
        "enabled": ${redis__enabled}, 
        "isCluster": ${redis__isCluster},
        "host": "${redis__host}",
        "port": ${redis__port},
        "password": "${redis__password}",
        "family": "${redis__family}",
        "db": ${redis__db}
    },
    "nodeCache": {
        "enabled": ${nodeCache__enabled}
    },
    "maxBlockPerCrawl": ${maxBlockPerCrawl}

}
EOF
}

gen_runtime_config__crawler() {
    cat << EOF
###############################################################################################################
##   crawler: ${crawler__runtime_config_file}
###############################################################################################################
EOF
    gen_runtime_config__crawler0 | tee ${crawler__runtime_config_file}_ | sed "s~^\(.*\)~## \1~"
    cat << EOF  
###############################################################################################################

EOF
}

mk_target__transfer_from_cache() {
    local ss_cache_dir=$1
    local jail=$2

    # mongo
    libmongod__gen__conf ${jail}

    # crawler
    mkdir -p ${jail}${crawler__libdir}
    cp -R ${ss_cache_dir}/files/* ${jail}${crawler__libdir}/
    cp -R mongo-db ${jail}${crawler__libdir}/

    gen_runtime_config__crawler

    mkdir -p $(dirname ${jail}${crawler__configdir}/${crawler__runtime_config_file})
    cp ${crawler__runtime_config_file}_ ${jail}${crawler__configdir}/${crawler__runtime_config_file}
    cp ${crawler__build_config_file} ${jail}${crawler__configdir}/

    libsystemd__write_svc ${jail} "${crawler__daemon_name}"
}

mk_target__libfn() {
    libss__libfn "${crawler__daemon_name}"
    libmongod__libfn "${crawler__daemon_name}"
    libsystemd__libfn "${crawler__daemon_name}"
}

mk_target__steps__pre_install() {
    libss__steps__pre_install "${crawler__daemon_name}"
    libmongod__steps__pre_install "${crawler__daemon_name}"
    libsystemd__steps__pre_install "${crawler__daemon_name}"
}

mk_target__steps__post_install() {
    libss__steps__post_install "${crawler__daemon_name}"
    libmongod__steps__post_install "${crawler__daemon_name}"
    libsystemd__steps__post_install "${crawler__daemon_name}"
    #the crawler daemon rewrites crawler__runtime_config_file allowing explorer set starting_height, matching the L1 snapshot height
    #/var/lib/mongodb is included bcs __ctl.sh move_node_state wipes this out and the restore state could be patched (testnet restarts)
    cat << EOF 
    mkdir -p ${crawler__logdir}
    chmod 0777 ${crawler__logdir}
    chown ${runuser}:${runuser} ${crawler__configdir}/${crawler__runtime_config_file}
    mkdir -p /var/lib/mongodb
    chown mongodb:mongodb /var/lib/mongodb -R
EOF
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall "${crawler__daemon_name}"
    libmongod__steps__pre_uninstall "${crawler__daemon_name}"
    libsystemd__steps__pre_uninstall "${crawler__daemon_name}"
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall "${crawler__daemon_name}"
    libmongod__steps__post_uninstall "${crawler__daemon_name}"
    libsystemd__steps__post_uninstall "${crawler__daemon_name}"
}

mk_target__declare_listening_tcp_ports() {
#    libss__declare_listening_tcp_port  "${crawler__daemon_name}" ${crawler__listen_port} http localhost
    libmongod__declare_listening_tcp_ports "${crawler__daemon_name}"
    libsystemd__declare_listening_tcp_ports "${crawler__daemon_name}"
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared "${crawler__daemon_name}"
    libmongod__systemctl_services__shared "${crawler__daemon_name}"
    libsystemd__systemctl_services__shared "${crawler__daemon_name}"
}

mk_target__systemctl_services() {
    libss__systemctl_services "${crawler__daemon_name}"
    libmongod__systemctl_services "${crawler__daemon_name}"
    libsystemd__systemctl_services "${crawler__daemon_name}"
}

mk_target__libweb_info() {
:
}

mk_target__amend() {
    local jail=$1
    libss__amend $jail "${crawler__daemon_name}"
    libmongod__amend $jail "${crawler__daemon_name}" 
    libsystemd__amend $jail "${crawler__daemon_name}"
    mk_target__amend__dont_uninstall_files_in $jail ${crawler__libdir}
}

mk_target__hot_upgrade__info() {
    #preserve-runtime_dir    chown-user chown-grp
    libmongod__hot_upgrade__info
    libss__hot_upgrade__info
}

mk_target__constructor() {
    . ${system_home}/lib/mk_target/libbuild_systemd.env
    . ${system_home}/lib/mk_target/libbuild_mongod.env
    libss__constructor
    libmongod__constructor 
    libsystemd__constructor
}

