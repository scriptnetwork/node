#!/usr/bin/env bash

function mk_target__deps_build__apt {
    libss__deps_build__apt
    libsystemd__deps_build__apt
    libweb__deps_build__apt
    echo "npm"
}

function mk_target__deps_runtime__apt {
    libss__deps_runtime__apt
    libsystemd__deps_runtime__apt
    libweb__deps_runtime__apt
    echo "nodejs"
}

function mk_target__build_order__depends {
    echo "be/L1/script4 be/L1/bridge_eth"
}

function mk_target__check_instance {
    check_instance__p2p_infrastructure
}

function mk_target__resolve_variables {
    #       dest_variable               SS                  instance        network         var
    resolve gov__chainID                be/L1/script4       ${ss_instance}  ${ss_network}   gov__chainID
    resolve eth_chain_id                be/L1/script4       ${ss_instance}  ${ss_network}   eth_chain_id
    resolve gov__api_URL                be/L1/script4       ${ss_instance}  ${ss_network}   gov__api_URL
    resolve gov__api_URL__local         be/L1/script4       ${ss_instance}  ${ss_network}   gov__api_URL__local
    resolve wallet__api_URL             be/L1/script4       ${ss_instance}  ${ss_network}   wallet__api_URL
    resolve wallet__api_URL__local      be/L1/script4       ${ss_instance}  ${ss_network}   wallet__api_URL__local
    resolve wallet__rpc_listen_port     be/L1/script4       ${ss_instance}  ${ss_network}   wallet__rpc_listen_port
    resolve gov__secrets_dir            be/L1/script4       ${ss_instance}  ${ss_network}   gov__secrets_dir
    resolve wallet__keys_dir            be/L1/script4       ${ss_instance}  ${ss_network}   wallet__keys_dir
    resolve bridge_eth__svcname         be/L1/bridge_eth    ${ss_instance}  ${ss_network}   svcname
    resolve be_explorer__URL            be/explorer         ${ss_instance}  ${ss_network}   URL
    resolve be_explorer__URL__local     be/explorer         ${ss_instance}  ${ss_network}   URL__local
    resolve fe_explorer__URL            fe/explorer         ${ss_instance}  ${ss_network}   URL
}

function mk_target__set_vars {
    #----------------subsystem
    ss_version="1.0"
    ss_test__delay="0"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #------------------ daemon
    daemon_name=""
    libdir="/svr/${system_unix_name}/${ssn}"
    configdir="${libdir}"
    bindir="${libdir}"  #TODO: r/o filesystem
    logdir="/var/log"
    bin_daemon="${bindir}/app.js"
    if [[ "_${build_mode}" == "_debug" ]]; then  #loglevel possible values: error warn info verbose debug
        log_levels="*info"
    else
        log_levels="*error"
    fi
    workdir="${libdir}"
    exec_line="node ${bin_daemon}"
    after_svc="${bridge_eth__svcname}"

    #------------------------ config
    build_config="dotool.js"
    addresses_file="${secrets_dir}/addresses"
    # load_keys #set admin__address and admin__sk

    #------------------------ systemd
    libsystemd_input__workdir="${workdir}"
    libsystemd_input__exec_line="${exec_line}"
    libsystemd_input__after_svc="${after_svc}"
    libsystemd__set_vars "${daemon_name}"

    #-------------------------ports
    listen_port=$(reserve_port "${daemon_name}")
    net_interface="127.0.0.1"

    #------------------------ libweb
    webmode="proxy"
    hostname="$(p2p_hostname_rewrite backend-wallet)"
    url_path="api"
    libweb__set_vars "${daemon_name}" "${webmode}" "${daemon_name}" "${listen_port}" "${hostname}" "${url_path}"

    #------------------------- pub
    URL="$(liburl__peek URL)"
    URL__local="http://127.0.0.1:${listen_port}/${url_path}"
    faucet_shot_SCPT=1000
    faucet_shot_SPAY=100

    if [[ $ss_network == "testnet" ]]; then
        faucet_endpoint__local="${URL__local}/request-faucet"
        faucet_endpoint="${URL}/request-faucet"
    else
        faucet_endpoint__local=""
        faucet_endpoint=""
    fi
}

function mk_target__vars__echo {
    libss__vars__echo
    libsystemd__vars__echo
    libweb__vars__echo
    mk_target__vars__echo__header
    cat << EOF
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
wallet__rpc_listen_port="${wallet__rpc_listen_port}"
bridge_eth__svcname="${bridge_eth__svcname}"
be_explorer__URL="${be_explorer__URL}"
be_explorer__URL__local="${be_explorer__URL__local}"
fe_explorer__URL="${fe_explorer__URL}"
daemon_name="${daemon_name}"
libdir="${libdir}"
configdir="${configdir}"
bindir="${bindir}"
logdir="${logdir}"
bin_daemon="${bin_daemon}"
log_levels="${log_levels}"
log_levels="${log_levels}"
workdir="${workdir}"
exec_line="${exec_line}"
after_svc="${after_svc}"
wallet__api_URL="${wallet__api_URL}"
wallet__api_URL__local="${wallet__api_URL__local}"
build_config="${build_config}"
libsystemd_input__workdir="${libsystemd_input__workdir}"
libsystemd_input__exec_line="${libsystemd_input__exec_line}"
libsystemd_input__after_svc="${libsystemd_input__after_svc}"
listen_port="${listen_port}"
net_interface="${net_interface}"
webmode="${webmode}"
hostname="${hostname}"
url_path="${url_path}"
wallet__keys_dir="${wallet__keys_dir}"
gov__chainID="${gov__chainID}"
eth_chain_id="${eth_chain_id}"
gov__api_URL="${gov__api_URL}"
gov__api_URL__local="${gov__api_URL__local}"
URL="${URL}"
URL__local="${URL__local}"
faucet_shot_SCPT="${faucet_shot_SCPT}"
faucet_shot_SPAY="${faucet_shot_SPAY}"
faucet_endpoint__local="${faucet_endpoint__local}"
faucet_endpoint="${faucet_endpoint}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

function mk_target__generate_static_conf {
    echo "## build_config ###########################################"
    echo "## file: ${build_config}"
    echo "###########################################################"
    cat << EOF | tee ${build_config} | sed "s~\(.*\)~## \1~"
const dotool = {
    git_version: "${git_version}",
    tgt_path: "${tgt_path}",
    ss_network: "${ss_network}",
    ss_instance: "${ss_instance}",
    listen_port: ${listen_port},
    net_interface: "${net_interface}",
    rpc_url: "${URL}",
    chain_id: "${gov__chainID}",
    eth_chain_id: ${eth_chain_id},
    ADMIN_ADDRESS: "${admin__address}",
    ADMIN_PVT_KEY: "${admin__sk}",
    BE_EXPLORER_URL: "${be_explorer__URL}",
    EXPLORER_URL_LOCAL: "${be_explorer__URL__local}",
    EXPLORER_BASE_URL: "${fe_explorer__URL}",
    PORT: "${listen_port}",
    NODE_RPC_URL: "${gov__api_URL}",
    NODE_RPC_URL_LOCAL: "${gov__api_URL__local}",
    CLI_RPC_URL: "${wallet__api_URL}",
    CLI_RPC_URL_LOCAL: "${wallet__api_URL__local}",
    BNB_SCAN_TESTNET_API: "https://api-testnet.bscscan.com/api",
    CHAIN_ID: "${gov__chainID}",
    faucet_shot_SCPT: "${faucet_shot_SCPT}",
    faucet_shot_SPAY: "${faucet_shot_SPAY}"
}

module.exports = dotool;

EOF
}

function address_sk {
    local name=$1
    local keyfile=$2
    address=$(cat ${keyfile} | tr ',' ' ' | tr '{' ' ' | tr '}' ' ' | xargs -n1 | tr ':' ' ' | grep "^address " | awk '{ print $2 }')
    sk=$(cat ${keyfile} | tr ',' ' ' | tr '{' ' ' | tr '}' ' ' | xargs -n1 | tr ':' ' ' | grep "^privatekey " | awk '{ print $2 }')
    echo "${name}__address=\"${address}\""
    echo "${name}__sk=\"${sk}\""
}

function new_key {
    name=$1
    rm -rf ${secrets_dir}/tmp
    mkdir -p ${secrets_dir}/tmp
    local output=$(../../be/L1/script4/scriptcli --config ${secrets_dir}/tmp key new) 
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 50499"
        exit 1
    fi
    address=$(echo $output | awk '{ print $NF }')
    address=${address:2}
    sk=$(cat ${secrets_dir}/tmp/keys/plain/${address} | tr ',' ' ' | tr '{' ' ' | tr '}' ' ' | xargs -n1 | tr ':' ' ' | grep "^privatekey " | awk '{ print $2 }')
    mkdir -p ${secrets_dir}/keys/plain
    mv ${secrets_dir}/tmp/keys/plain/${address} ${secrets_dir}/keys/plain/
    rm -rf ${secrets_dir}/tmp
    echo "${name}__address=\"${address}\""
    echo "${name}__sk=\"${sk}\""
}

function load_keys {
    local admin_keyfile=$(find ${gov__secrets_dir}/key/plain -type f | head -n1)
    if [[ "_${admin_keyfile}" == "_" ]]; then
        >&2 print_stack
        >&2 echo "KO 44312 admin key not found at ${gov__secrets_dir}/key/plain"
        exit 1
    fi
    address_sk "govkey" ${admin_keyfile} > /tmp/gov_admin
    . /tmp/gov_admin
    rm -f /tmp/gov_admin

    if [[ ! -f ${addresses_file} ]]; then
        if [[ ! -d ${gov__secrets_dir}/key/plain ]]; then
            local msg="KO 44392 cannot access gov secrets ${gov__secrets_dir}/key/plain"
            echo $msg | tee /tmp/stop_compilation >&2
            return
        fi
        mkdir -p $(dirname ${addresses_file})
        touch ${addresses_file}
        mkdir -p ${secrets_dir}/keys/plain

        cp ${admin_keyfile} ${secrets_dir}/keys/plain/
        address_sk "admin" ${admin_keyfile} >> ${addresses_file}
#        new_key "faucet_0" >> ${addresses_file}
#        new_key "faucet_1" >> ${addresses_file}
#        new_key "faucet_2" >> ${addresses_file}
    fi
    if [[ ! -f ${addresses_file} ]]; then
        >&2 echo "KO 68572 Cannot find keys in secret storage. ${addresses_file}"
        exit 1
    fi
    if [[ ! -d ${secrets_dir}/keys/plain ]]; then
        >&2 echo "KO 68573 Cannot find keys in secret storage. ${secrets_dir}/keys/plain"
        exit 1
    fi
    let nc=$(find ${secrets_dir}/keys/plain -type f | wc -l | tr -d ' ')
    let num_keys__expected=1
    if [[ $nc -ne ${num_keys__expected} ]]; then
        >&2 echo "KO 78868 ${num_keys__expected} keys expected to exist in directory ${secrets_dir}/keys/plain. found $nc"
        exit 1
    fi
    # set admin__address and admin__sk
    . ${addresses_file}

    if [[ "_${admin__address}" != "_${govkey__address}" ]]; then
        local msg="KO 30298 gov key doesn't match admin key. Check admin__address in ${addresses_file}. Compare to key at ${gov__secrets_dir}/key/plain."
        echo $msg | tee /tmp/stop_compilation >&2
    fi
}

function mk_target__build_install {
    local ss_cache_dir=$1
    if [[ -d ${ss_cache_dir}/files ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 27678 Compilation failed"
        exit 1
    fi
    mkdir -p ${ss_cache_dir}/files/
    mv node_modules ${ss_cache_dir}/files/
    cp -R api ${ss_cache_dir}/files/
    cp -R models ${ss_cache_dir}/files/
    cp -R shared ${ss_cache_dir}/files/
    cp app.js ${ss_cache_dir}/files/
    $cp_pres package.json ${ss_cache_dir}/files/
}

function mk_target__transfer_from_cache {
    local ss_cache_dir=$1
    local jail=$2
    mkdir -p ${jail}${libdir}
    cp -R ${ss_cache_dir}/files/* ${jail}${libdir}/
    cp ${build_config} ${jail}${libdir}/
    if [[ "_${ss_instance}" != "_user" ]]; then
        mkdir -p ${jail}${wallet__keys_dir}/plain
        cp -R ${secrets_dir}/keys/plain/* ${jail}${wallet__keys_dir}/plain/
    fi
    libsystemd__write_svc ${jail} "${daemon_name}"
    libweb__gen_site ${jail} "${daemon_name}"
    if [[ -f /tmp/stop_compilation ]]; then
        >&2 echo "KO 76893 Stopped compilation"
        exit 1
    fi
}

function mk_target__libfn {
    libss__libfn "${daemon_name}"
    libsystemd__libfn "${daemon_name}"
    libweb__libfn "${daemon_name}"
}

function mk_target__steps__pre_install {
    libss__steps__pre_install "${daemon_name}"
    libsystemd__steps__pre_install "${daemon_name}"
    libweb__steps__pre_install "${daemon_name}"
}

function mk_target__steps__post_install {
    libss__steps__post_install "${daemon_name}"
    libsystemd__steps__post_install "${daemon_name}"
    libweb__steps__post_install "${daemon_name}"
}

function mk_target__steps__pre_uninstall {
    libss__steps__pre_uninstall "${daemon_name}"
    libsystemd__steps__pre_uninstall "${daemon_name}"
    libweb__steps__pre_uninstall "${daemon_name}"
}

function mk_target__steps__post_uninstall {
    libss__steps__post_uninstall "${daemon_name}"
    libsystemd__steps__post_uninstall "${daemon_name}"
    libweb__steps__post_uninstall "${daemon_name}"
}

function mk_target__declare_listening_tcp_ports {
    libss__declare_listening_tcp_port "${daemon_name}" ${listen_port} http localhost
    libsystemd__declare_listening_tcp_ports "${daemon_name}"
    libweb__declare_listening_tcp_ports "${daemon_name}"
}

function mk_target__systemctl_services__shared {
    libss__systemctl_services__shared "${daemon_name}"
    libsystemd__systemctl_services__shared "${daemon_name}"
    libweb__systemctl_services__shared "${daemon_name}"
}

function mk_target__systemctl_services {
    libss__systemctl_services "${daemon_name}"
    libsystemd__systemctl_services "${daemon_name}"
    libweb__systemctl_services "${daemon_name}"
}

function mk_target__libweb_info {
    libweb__info "${daemon_name}"
}

function mk_target__amend {
    local jail=$1
    libss__amend $jail "${daemon_name}"
    libsystemd__amend $jail "${daemon_name}"
    libweb__amend $jail "${daemon_name}"
    mk_target__amend__dont_uninstall_files_in ${jail} ${libdir}
}

function mk_target__stats {
    local jail=$1
    echo
    echo "Generated $(find ${jail}${configdir} -type f | sed "s#^${jail}\(.*\)#\1#" | wc -l) files at: ${jail}"
    echo
    echo "Using secrets from: ${secrets_dir}"
    find ${secrets_dir} -type f | sed "s#^${secrets_dir}/\(.*\)#\1#"
    echo
}

function mk_target__constructor {
    . ${system_home}/lib/mk_target/libbuild_systemd.env
    . ${system_home}/lib/mk_target/libbuild_web.env
    libss__constructor
    libsystemd__constructor
    libweb__constructor
}

