#!/usr/bin/env bash

prefix="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
libdir=${prefix}/dtool
echo "libdir=>>>>>>>>>>>>>>>>>>>>>>${libdir}<<<<<<<<<<<<<<<<<<<<<<"

function mk_target__deps_build__apt {
    libss__deps_build__apt
    libsystemd__deps_build__apt
    libweb__deps_build__apt
    echo "npm"
}

function mk_target__deps_runtime__apt {
    libss__deps_runtime__apt
    libsystemd__deps_runtime__apt $@
    libweb__deps_runtime__apt $@
    echo "nodejs"
}

function mk_target__build_order__depends {
    echo "db/explorer"
}

function mk_target__check_instance {
    check_instance__p2p_infrastructure
}

function mk_target__resolve_variables {
    #       dest_variable               SS                  instance            network         var
    resolve db_uri                      db/explorer         ${ss_instance}      ${ss_network}   db__endpoint
    resolve db_address                  db/explorer         ${ss_instance}      ${ss_network}   db__bind_ip
    resolve db_port                     db/explorer         ${ss_instance}      ${ss_network}   db__listen_port
    resolve db_dbname                   db/explorer         ${ss_instance}      ${ss_network}   db__name
    resolve db__role                    db/explorer         ${ss_instance}      ${ss_network}   db__role
    resolve db__passphrase              db/explorer         ${ss_instance}      ${ss_network}   db__passphrase
    resolve crawler__svcname            db/explorer         ${ss_instance}      ${ss_network}   crawler__svcname
    resolve crawler__libdir             db/explorer         ${ss_instance}      ${ss_network}   crawler__libdir
    resolve gov__chainID                be/L1/script4       ${ss_instance}      ${ss_network}   gov__chainID
    resolve eth_chain_id                be/L1/script4       ${ss_instance}      ${ss_network}   eth_chain_id
    resolve gov__rpc_listen_port        be/L1/script4       ${ss_instance}      ${ss_network}   gov__rpc_listen_port
    resolve fe_explorer__URL            fe/explorer         ${ss_instance}      ${ss_network}   URL
}

function mk_target__set_vars {
    #----------------subsystem
    ss_version="1.0"
    ss_test__delay="10"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #----------------daemon
    daemon_name=""
    libdir="/svr/${system_unix_name}/${ssn}"
    configdir="${libdir}"
    bindir="${libdir}"  #TODO: r/o filesystem
    logdir="/var/log/${system_unix_name}"
    bin_daemon="${bindir}/run.js"
    if [[ "_${build_mode}" == "_debug" ]]; then  #loglevel possible values: error warn info verbose debug
        log_levels="*debug"
    else
        log_levels="*error"
    fi
    workdir="${libdir}"
    exec_line="/bin/bash -c 'NODE_PATH=${crawler__libdir} node ${bin_daemon}'"
    after_svc=${crawler__svcname}

    #--------------- config
    build_config="dotool.js"
    runtime_config="config.cfg"
    blockchain__network_id="${gov__chainID}"

    #------------------------ systemd
    libsystemd_input__workdir="${workdir}"
    libsystemd_input__exec_line="${exec_line}"
    libsystemd_input__after_svc="${after_svc}"
    libsystemd__set_vars "${daemon_name}" 

    #----------------ports
    #local listen_port__mainnet=12301
    #local listen_port__testnet=11301
    #local var="listen_port__${ss_network}";
    listen_port=$(reserve_port "${daemon_name}") #${!var}
    
    #local rest_api_listen_port__mainnet=12341
    #local rest_api_listen_port__testnet=11341
    #local var="rest_api_listen_port__${ss_network}";
    rest_api_listen_port=$(reserve_port "${daemon_name}rest_api") #${!var}

    #----------------libweb
    webmode="proxy"
    hostname="$(p2p_hostname_rewrite backend-explorer)"
    url_path="api"
    libweb__set_vars "${daemon_name}" "${webmode}" "${daemon_name}" "${rest_api_listen_port}" "${hostname}" "${url_path}"

    #----------------pub
    URL="$(liburl__peek URL)"
    URL_nopath="$(liburl__peek URL_nopath)"
    URL__local="http://127.0.0.1:${rest_api_listen_port}/api"

}

function mk_target__vars__echo {
    mk_target__vars__echo__header
    libss__vars__echo
    libsystemd__vars__echo "${daemon_name}"
    libweb__vars__echo "${daemon_name}"
    cat << EOF
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
db_uri="${db_uri}"
db_address="${db_address}"
db_port="${db_port}"
db_dbname="${db_dbname}"
db__role="${db__role}"
db__passphrase="${db__passphrase}"
crawler__svc__svcname="${crawler__svc__svcname}"
libdir="${libdir}"
crawler__libdir="${crawler__libdir}"
configdir="${configdir}"
bindir="${bindir}"
logdir="${logdir}"
bin_daemon="${bin_daemon}"
log_levels="${log_levels}"
workdir="${workdir}"
blockchain__network_id="${blockchain__network_id}"
eth_chain_id="${eth_chain_id}"
exec_line="${exec_line}"
after_svc="${after_svc}"
daemon_name="${daemon_name}"
libsystemd_input__workdir="${libsystemd_input__workdir}"
libsystemd_input__exec_line="${libsystemd_input__exec_line}"
libsystemd_input__after_svc="${libsystemd_input__after_svc}"
listen_port="${listen_port}"
rest_api_listen_port="${rest_api_listen_port}"
webmode="${webmode}"
hostname="${hostname}"
url_path="${url_path}"
URL="${URL}"
build_config="${build_config}"
runtime_config="${runtime_config}"

EOF
}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

function mk_target__generate_static_conf {
    echo "## runtime_config ####################################"
    echo "## file: ${runtime_config}"
    echo "###########################################################"
    cat << EOF | tee ${runtime_config} | sed "s~\(.*\)~## \1~"
{
    "mongo": {
        "uri": "${db_uri}",
        "address": "${db_address}",
        "port": ${db_port},
        "dbName": "${db_dbname}"
    },
    "node": {
        "address": "127.0.0.1",
        "port": "${gov__rpc_listen_port}"
    },
    "log": {
        "level": "${log_levels}"
    },
    "server": {
        "port": ${listen_port}
    },
    "blockchain": {
        "network_id": "${blockchain__network_id}"
    },
    "rest_api": {
        "port": ${rest_api_listen_port}
    }
}
EOF
    echo "###########################################################"
    echo


    ## dotool interface
    echo "## build_config ###########################################"
    echo "## file: ${build_config}"
    echo "###########################################################"

    cat << EOF | tee ${build_config} | sed "s~\(.*\)~## \1~"
const dotool = {
    git_version: "${git_version}",
    tgt_path: "${tgt_path}",
    ss_network: "${ss_network}",
    ss_instance: "${ss_instance}",
    listen_port: ${listen_port},
    net_interface: "${net_interface}",
    db_uri: "${db_uri}",
    db_address: "${db_address}",
    db_port: "${db_port}",
    db_dbname: "${db_dbname}",
    gov__rpc_listen_port: "${gov__rpc_listen_port}",
    log_levels: "${log_levels}",
    listen_port: ${listen_port}, 
    chain_id: "${gov__chainID}",
    eth_chain_id: "${eth_chain_id}",
    rest_api_listen_port: ${rest_api_listen_port},
    rpc_url: "${URL}",
}

module.exports = dotool;

EOF

}

function mk_target__build_install {
    local ss_cache_dir=$1
    if [[ -d ${ss_cache_dir}/files ]]; then
        return
    fi
    #TODO send to stderr real errors (after filtering them out among warnings) //anything in stderr causes build to stop 
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 67678 Compilation failed"
        exit 1
    fi
    mkdir -p ${ss_cache_dir}/files
    mv node_modules ${ss_cache_dir}/files/
    make clean
}

#function fn_headers {
#    libweb__CORS_header ${fe_explorer__URL}
#}

function mk_target__transfer_from_cache {
    local ss_cache_dir=$1
    local jail=$2
    mkdir -p ${jail}${libdir}
    cp -R ${ss_cache_dir}/files/* ${jail}${libdir}/
#>&2 ls -la  ${jail}${libdir}/node_modules/.bin/uuid          #https://github.com/scriptnetwork/system/issues/26
    cp -R helper ${jail}${libdir}/
    cp -R libs ${jail}${libdir}/
    cp -R routes ${jail}${libdir}/
    $cp_pres package.json ${jail}${libdir}/
    cp run.js ${jail}${libdir}/
    cp ${runtime_config} ${jail}${libdir}/
    cp dotool.js ${jail}${libdir}/
    libsystemd__write_svc ${jail} "${daemon_name}"
    libweb__gen_site ${jail} "${daemon_name}"  #  fn_headers
}

function mk_target__libfn {
    libss__libfn "${daemon_name}"
    libsystemd__libfn "${daemon_name}"
    libweb__libfn "${daemon_name}"
}

function mk_target__steps__pre_install {
    libss__steps__pre_install "${daemon_name}"
    libsystemd__steps__pre_install "${daemon_name}"
    libweb__steps__pre_install "${daemon_name}"
}

function mk_target__steps__post_install {
    libss__steps__post_install "${daemon_name}"
    libsystemd__steps__post_install "${daemon_name}"
    libweb__steps__post_install "${daemon_name}"
}

function mk_target__steps__pre_uninstall {
    libss__steps__pre_uninstall "${daemon_name}"
    libsystemd__steps__pre_uninstall "${daemon_name}"
    libweb__steps__pre_uninstall "${daemon_name}"
}

function mk_target__steps__post_uninstall {
    libss__steps__post_uninstall "${daemon_name}"
    libsystemd__steps__post_uninstall "${daemon_name}"
    libweb__steps__post_uninstall "${daemon_name}"
}

function mk_target__declare_listening_tcp_ports {
    libss__declare_listening_tcp_port "${daemon_name}" ${listen_port} http localhost
    libsystemd__declare_listening_tcp_ports "${daemon_name}"
    libweb__declare_listening_tcp_ports "${daemon_name}"
}

function mk_target__systemctl_services__shared {
    libss__systemctl_services__shared "${daemon_name}"
    libsystemd__systemctl_services__shared "${daemon_name}"
    libweb__systemctl_services__shared "${daemon_name}"
}

function mk_target__systemctl_services {
    libss__systemctl_services "${daemon_name}"
    libsystemd__systemctl_services "${daemon_name}"
    libweb__systemctl_services "${daemon_name}"
}

function mk_target__libweb_info {
    libweb__info "${daemon_name}"
}

function mk_target__amend {
    jail=$1
    libss__amend $jail "${daemon_name}"
    libsystemd__amend $jail "${daemon_name}"
    libweb__amend $jail "${daemon_name}"
    mk_target__amend__dont_uninstall_files_in $jail ${libdir}
}

function mk_target__constructor {
    . /usr/local/lib/dtool/mk_target/libbuild_systemd.env
    . /usr/local/lib/dtool/mk_target/libbuild_web.env
    libss__constructor
    libsystemd__constructor
    libweb__constructor
}


