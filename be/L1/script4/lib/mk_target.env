#!/bin/bash

mk_target__deps_build__apt() {
    libss__deps_build__apt
    libsystemd__deps_build__apt
    libweb__deps_build__apt
    echo "golang"
}

mk_target__deps_runtime__apt() {
    libss__deps_runtime__apt
    libsystemd__deps_runtime__apt
    libweb__deps_runtime__apt
}

mk_target__build_order__depends() {
    echo ""
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance    network         var

    for oi in $(all_other_instances); do
        resolve seed__mnemonic__${oi}         be/L1/script4       ${oi}       ${ss_network}   m
        resolve seed__port__${oi}             be/L1/script4       ${oi}       ${ss_network}   gov__seed_port
    done

    if [[ "_${ss_instance}" != "_genesis" ]]; then
        resolve genesis__gov__secrets_dir         be/L1/script4       genesis       ${ss_network}   gov__secrets_dir
    fi
}

mk_target__declare_daemons() {  #TODO: not used, future abstraction.
    echo "gov"
    echo "wallet"
}

convert_to_wei() {
    local amount=$1
    local wei_amount=$(echo "$amount * 1000000000000000000" | bc)
    echo $wei_amount
}

convert_from_wei() {
    local wei_amount=$1
    local amount=$(echo "scale=18; $wei_amount / 1000000000000000000" | bc)
    echo $amount
}

#Found this configuration in the go code, not reflected here.
#common/config.go
#17:	// CfgNodeType indicates the type of the node, e.g. blockchain node/edge node
#18:	CfgNodeType = "node.type"
#175:	viper.SetDefault(CfgNodeType, 1) // 1: blockchain node, 2: edge node
mk_target__set_vars__gov() {
    #---------------------------daemon__gov
    gov__libdir="${libdir}"
    gov__configdir="/home/${runuser}/${script4_tgt_path}/gov"
    gov__config_file=${gov__configdir}/config.yaml
    gov__config_file__hf=${gov__configdir}/hf.cfg
    gov__dbdir="${gov__configdir}/db"
    gov__bindir="${bindir}"
    gov__logdir="/var/log"
    gov__bin=${system_unix_name}__script4__gov
    gov__bin_daemon="${bindir}/${gov__bin}"
    if [[ "_${build_mode}" == "_debug" ]]; then
        gov__log_levels="*:debug"
    else
        gov__log_levels="*:error"
    fi
    gov__workdir="/home/${runuser}"
    gov__exec_line="${gov__bin_daemon} start --config=${gov__configdir}"
    gov__after_svc=""

    #-------------------------config__gov
    gov__secrets_dir="${ss_secrets__root}/gov"
    if [[ "_${ss_instance}" == "_genesis" ]]; then
        gov__genesis_file="${gov__configdir}/genesis"
        #gov__snapshot_file__src="$(pwd)/${ss_network}/snapshot"
        #gov__stake_deposit_file="${gov__datadir}/genesis_stake_deposit.json"
        #gov__coins_file="${gov__datadir}/genesis_script_erc20_snapshot.json"
             gov__holder_1__balance="1000000000000000000000000000" #1.000.000.000 SCPT
        gov__holder_1__stake_deposit="200000000000000000000000000"
        genesis__gov__secrets_dir=${gov__secrets_dir}
    else
        gov__genesis_file=""
        #gov__stake_deposit_file=""
        #gov__coins_file=""
        gov__holder_1__balance=""
        gov__holder_1__stake_deposit=""
    fi
    gov__snapshot_file="${gov__configdir}/snapshot"
    gov__datadir=${gov__configdir}/data
    gov__chainID=${ss_network}
    gov__address_file="${gov__secrets_dir}/address"
    gov__rpc_address="127.0.0.1"
    gov__statePruningRetainedBlocks=2048


    #----------------------------systemd__gov
    gov__daemon_name="gov"
    libsystemd_input__workdir="${gov__workdir}"
    libsystemd_input__exec_line="${gov__exec_line}"
    libsystemd_input__after_svc="${gov__after_svc}"
    libsystemd__set_vars "${gov__daemon_name}" 

    #------------------------- ports__gov    #https://github.com/scriptnetwork/script4/blob/master/common/config.go
    gov__p2p_listen_port=$(reserve_port "${gov__daemon_name}__p2p")
    gov__rpc_listen_port=$(reserve_port "${gov__daemon_name}__rpc")
    if [[ ${ss_instance} != "user" ]]; then
        gov__seed_port=${gov__p2p_listen_port}
    else
        gov__seed_port=0
    fi

    #------------------------------libweb gov
    gov__webmode="proxy"
    gov__listen_port=${gov__rpc_listen_port}
    gov__hostname="$(p2p_hostname_rewrite node)"
    gov__url_path="rpc"
    libweb__set_vars "${gov__daemon_name}" "${gov__webmode}" "${gov__daemon_name}" "${gov__listen_port}" "${gov__hostname}" "${gov__url_path}"

    #---------------------------pub - gov
    gov__server_name="$(liburl__peek server_name)"
    gov__api_URL="$(liburl__peek URL)"
    gov__svcname="$(libsystemd__peek svc__svcname)"
    gov__api_URL__local="http://127.0.0.1:${gov__rpc_listen_port}/rpc"
    gov__seeds=""
    for oi in $(all_other_instances); do
        local var=seed__mnemonic__${oi}
        local seed__mnemonic=${!var}
        local var=seed__port__${oi}
        local seed__port=${!var}
        if [[ "_${seed__port}" != "_0" ]]; then
            local token_resolved_on_deploy="##DEPLOY__IP_ADDR__${seed__mnemonic}##"
            gov__seeds="${gov__seeds}${token_resolved_on_deploy}:${seed__port}," #To be resolved at deploy stage
        fi
    done
    if [[ "_${gov__seeds}" != "_" ]]; then
        gov__seeds=${gov__seeds::-1}
    fi
    gov__NAT_mapports="false"
    if [[ "_${ss_instance}" == "_user" ]]; then
        gov__NAT_mapports="true"
    fi
    gov__alias__script="${gov__bin_daemon} --config=${gov__configdir}"
    load_key
    load_chain
    lightning_min_stake__scpt=20000   #SCPT
    validator_min_stake__scpt=1000000   #SCPT
    min_stake=1 #SCPT
    gov__mk_snapshot_filename="${system_unix_name}__$(tgt_instance_identifier "mk_snapshot")"

    gov__key_dir="${gov__configdir}/key"
    gov__backup_dir="${gov__configdir}/backup"
}

mk_target__set_vars__wallet() {
    #-------------------------- daemon wallet
    wallet__daemon_name="wallet"
    wallet__libdir="${libdir}"
    wallet__configdir="/home/${runuser}/${script4_tgt_path}/wallet"
    wallet__config_file=${wallet__configdir}/config.yaml # .OFF  # see generate_wallet_config_yaml
    wallet__bindir="${bindir}"
    wallet__logdir="/var/log"
    wallet__bin=${system_unix_name}__script4__wallet
    wallet__bin_daemon="${bindir}/${wallet__bin}"
    if [[ "_${build_mode}" == "_debug" ]]; then
        wallet__log_levels="*:debug"
        wallet__CfgDebug="debug"
    else
        wallet__log_levels="*:error"
        wallet__CfgDebug="false"
    fi
    wallet__rpc_listen_port=$(reserve_port "${wallet__daemon_name}__rpc")
    wallet__workdir="/home/${runuser}"
    wallet__exec_line="/bin/bash -c 'REMOTERPCENDPOINT=${wallet__gov_endpoint} ${wallet__bin_daemon} daemon start --config=${wallet__configdir} --port ${wallet__rpc_listen_port}'"
#    wallet__exec_line="${wallet__bin_daemon} daemon start --config=${wallet__configdir} --port ${wallet__rpc_listen_port}'"
    wallet__after_svc="${gov__svc__svcname}"

    # REMOTERPCENDPOINT:
    # right now scriptcli executable doesn't read config file from provided location,
    # only from default ~/.scriptcli directory, so saving this for the future when scriptcli
    # is fixed

    #----------------------------------- systemd__wallet
    libsystemd_input__workdir="${wallet__workdir}"
    libsystemd_input__exec_line="${wallet__exec_line}"
    libsystemd_input__after_svc="${wallet__after_svc}"
    libsystemd__set_vars "${wallet__daemon_name}" 

    #------------------------------libweb wallet
    wallet__webmode="proxy"
    wallet__listen_port=${wallet__rpc_listen_port}
    wallet__hostname="$(p2p_hostname_rewrite node)"
    wallet__url_path="rpc"
    libweb__set_vars "${wallet__daemon_name}" "${wallet__webmode}" "${wallet__daemon_name}" "${wallet__listen_port}" "${wallet__hostname}" "${wallet__url_path}"

    #---------------------------pub - wallet
    wallet__server_name="$(liburl__peek server_name)"
    wallet__api_URL="$(liburl__peek URL)"
    wallet__svcname="$(libsystemd__peek svc__svcname)"
    wallet__api_URL__local="http://127.0.0.1:${wallet__rpc_listen_port}/rpc"

    wallet__keys_dir="${wallet__configdir}/keys"
    wallet__alias__script="${wallet__bin_daemon} --config=${wallet__configdir}"
}

#-DBG0
mk_target__set_vars() {
    #----------------------subsystem
    ss_version="1.0"
    ss_test__delay="5"  #daemon verifying snapshot, etc
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    arch=$(uname -m)

    #----------------- config
    build_config="dotool/dotool.env"

    # chain_id convention:
    #   chain_id first digit:
    #       production blockchains start with 6
    #       stage blockchains start with 5
    #       dev blockchains start with 4
    #   chain_id last digit:
    #       mainnet blockchain ends with 5
    #       testnet blockchain ends with 4
    # See also: bridge_eth/common/utils.go func MapChainID(chainIDStr

    eth_chain_id__testnet=62854             # 62854 = 0xF586
    eth_chain_id__mainnet=62855             # 62855 = 0xF587
    if [[ "_${system__DNS__subdomain}" != "_" ]]; then #not production
        if [[ "_${system__DNS__subdomain}" == "_stage" ]]; then
            eth_chain_id__testnet=52854     # 52854 = 0xCE76
            eth_chain_id__mainnet=52855     # 52855 = 0xCE77
        else  #dev blockchain
            eth_chain_id__testnet=42854     # 42854 = 0xA766
            eth_chain_id__mainnet=42855     # 42855 = 0xA767
        fi
    fi
    local var="eth_chain_id__${ss_network}"
    eth_chain_id=${!var}

    #hf1: reward distribution proportional to stake
#    height__hf1__testnet=1125239        #Target Time (UTC): 2024-12-20 22:00:00
    height__hf1__testnet=1  #v4.1  #height when new reward distr entered into action
    height__hf1__mainnet=1124230        #Target Time (UTC): 2024-12-20 22:00:00
    if [[ "_${system__DNS__subdomain}" != "_" ]]; then #not production
        if [[ "_${system__DNS__subdomain}" == "_stage" ]]; then
            height__hf1__testnet=382707   #19th December 7 PM UTC
            height__hf1__mainnet=371981   #19th December 7 PM UTC
        else  #dev blockchain
            height__hf1__testnet=50
            height__hf1__mainnet=50
        fi
    fi
    local var="height__hf1__${ss_network}"
    height__hf1=${!var}




    license_amount_vn=4000000
    license_amount_ln=0    #TODO:change to 20K - ticket https://github.com/scriptnetwork/system/issues/293

    #--------------------------- daemons
    libdir=""
    bindir="/usr/local/bin"

    script4_tgt_path=$(tgt_path__compute script4)

    mk_target__set_vars__gov
    mk_target__set_vars__wallet

    license_dir=${gov__configdir}

    #----------------------------pub/output

    script4__git_url="https://github.com/scriptnetwork/script-4"
    script4__git_branch="master"
#    script4__git_branch="MM/job_309"


#-DBG1
#    _dbg__gen__set_vars__review_file | column -t -s'~' >&2
}

_dbg__gen__set_vars__review_file() {
    local f=lib/mk_target.env
    cat $f | \
    grep "^#-DBG0$" -A10000000 | \
    grep '^#-DBG1$' -m1 -B10000000 | while IFS= read -r line; do
        echo -n "$line~"
        echo "$line" | sed 's~.*${\(.*\)}.*~\1 ~g'
    done
}

mk_target__vars__echo__gov() {
    libsystemd__vars__echo "${gov__daemon_name}"
    libweb__vars__echo "${gov__daemon_name}"
    cat << EOF
# gov
gov__libdir="${gov__libdir}"
gov__configdir="${gov__configdir}"
gov__config_file="${gov__config_file}"
gov__config_file__hf="${gov__config_file__hf}"
gov__dbdir="${gov__dbdir}"
gov__bindir="${gov__bindir}"
gov__logdir="${gov__logdir}"
gov__bin="${gov__bin}"
gov__bin_daemon="${gov__bin_daemon}"
gov__log_levels="${gov__log_levels}"
gov__log_levels="${gov__log_levels}"
gov__workdir="${gov__workdir}"
gov__exec_line="${gov__exec_line}"
gov__after_svc="${gov__after_svc}"
gov__datadir="${gov__datadir}"
gov__genesis_file="${gov__genesis_file}"
gov__snapshot_file="${gov__snapshot_file}"
gov__chainID="${gov__chainID}"
gov__secrets_dir="${gov__secrets_dir}"
genesis__gov__secrets_dir="${genesis__gov__secrets_dir}"
gov__address_file="${gov__address_file}"
gov__rpc_address="${gov__rpc_address}"
gov__statePruningRetainedBlocks="${gov__statePruningRetainedBlocks}"
gov__holder_1__balance="${gov__holder_1__balance}"
gov__holder_1__stake_deposit="${gov__holder_1__stake_deposit}"
gov__seeds="${gov__seeds}"
gov__daemon_name="${gov__daemon_name}"
gov__p2p_listen_port="${gov__p2p_listen_port}"
gov__seed_port="${gov__seed_port}"
gov__rpc_listen_port="${gov__rpc_listen_port}"
gov__webmode="${gov__webmode}"
gov__listen_port="${gov__listen_port}"
gov__hostname="${gov__hostname}"
gov__url_path="${gov__url_path}"
gov__api_URL__local="${gov__api_URL__local}"
gov__NAT_mapports="${gov__NAT_mapports}"
gov__key_dir="${gov__key_dir}"
gov__backup_dir="${gov__backup_dir}"

#gov -pub
gov__server_name="${gov__server_name}"
gov__api_URL="${gov__api_URL}"
gov__svcname="${gov__svcname}"
gov__mk_snapshot_filename="${gov__mk_snapshot_filename}"

EOF
}

mk_target__vars__echo__wallet() {
    libsystemd__vars__echo "${wallet__daemon_name}"
    libweb__vars__echo "${wallet__daemon_name}"
    cat << EOF
# wallet
wallet__libdir="${wallet__libdir}"
wallet__configdir="${wallet__configdir}"
wallet__config_file="${wallet__config_file}"
wallet__bindir="${wallet__bindir}"
wallet__logdir="${wallet__logdir}"
wallet__bin="${wallet__bin}"
wallet__bin_daemon="${wallet__bin_daemon}"
wallet__log_levels="${wallet__log_levels}"
wallet__CfgDebug="${wallet__CfgDebug}"
wallet__workdir="${wallet__workdir}"
wallet__exec_line="${wallet__exec_line}"
wallet__after_svc="${wallet__after_svc}"
wallet__gov_endpoint="${wallet__gov_endpoint}"
wallet__daemon_name="${wallet__daemon_name}"
wallet__webmode="${wallet__webmode}"
wallet__listen_port="${wallet__listen_port}"
wallet__hostname="${wallet__hostname}"
wallet__url_path="${wallet__url_path}"
wallet__api_URL__local="${wallet__api_URL__local}"

#wallet - pub
wallet__server_name="${wallet__server_name}"
wallet__api_URL="${wallet__api_URL}"
wallet__svcname="${wallet__svcname}"
wallet__keys_dir="${wallet__keys_dir}"

EOF
}

mk_target__vars__echo() {
    libss__vars__echo
    mk_target__vars__echo__header
    cat << EOF
libdir="${libdir}"
bindir="${bindir}"
script4_tgt_path="${script4_tgt_path}"
eth_chain_id="${eth_chain_id}"
build_config="${build_config}"
script4__git_url="${script4__git_url}"
script4__git_branch="${script4__git_branch}"

EOF
    mk_target__vars__echo__gov
    mk_target__vars__echo__wallet
    cat << EOF
# output
gov_address="${gov_address}"
genesis_hash="${genesis_hash}"

height__hf1="${height__hf1}"

EOF
}

mk_target__output_vars__echo() {
    cat << EOF
gov_address="${gov_address}"
genesis_hash="${genesis_hash}"

EOF
}

mk_target__hot_upgrade__info() {
    libss__hot_upgrade__info
    #preserve-runtime_dir    chown-user chown-grp
#    echo "f ${gov__snapshot_file} ${runuser} ${runuser}"
    echo "d ${gov__dbdir} ${runuser} ${runuser}"
    echo "d ${wallet__keys_dir} ${runuser} ${runuser}"
    echo "d ${gov__key_dir} ${runuser} ${runuser}"
    echo "d ${gov__backup_dir} ${runuser} ${runuser}"
    echo "f ${gov__snapshot_file} ${runuser} ${runuser}"

}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

mk_target__generate_static_conf() {
    mk_target__vars__echo > system.env
    echo "## build_config ###########################################"
    echo "## file: ${build_config}"
    echo "###########################################################"
    mkdir -p $(dirname ${build_config})
    cat << EOF | tee ${build_config} | sed "s~\(.*\)~## \1~"
# all instances of all networks share the same compiled binaries. Customize using config files readable at runtime.  
# don't define anything that should be different for the different networks and instances.
script4__git_url="${script4__git_url}"
script4__git_branch="${script4__git_branch}"

EOF
}

mk_target__build_install() {
    local ss_cache_dir=$1
    if [[ -z $ss_cache_dir ]]; then
        >&2 print_stack
        >&2 echo "KO 69587 cache dir!."
        exit 1
    fi
    if [[ -d ${ss_cache_dir}/${arch} ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 66978 Compilation failed"
        exit 1
    fi
    echo "binaries produced at _output"
    mkdir -p ${ss_cache_dir}/${arch}
    mv _output/* ${ss_cache_dir}/${arch}/
}

mk_target__transfer_from_cache() {
    local ss_cache_dir=$1
    local jail=$2
    if [[ ! -d ${ss_cache_dir}/${arch} ]]; then
        >&2 echo "KO 76882 arch not found in cache. ${ss_cache_dir}/${arch}"
        exit 1
    fi
    local jailbindir=${jail}${bindir}
    if [[ ! -f ${jailbindir}/${gov__bin} ]]; then
        mkdir -p ${jailbindir}
        cp ${ss_cache_dir}/${arch}/* ${jailbindir}/
        mv ${jailbindir}/script ${jailbindir}/${gov__bin}
        mv ${jailbindir}/scriptcli ${jailbindir}/${wallet__bin}
    fi
    if [[ ! -f scriptcli ]]; then
        cp ${ss_cache_dir}/${arch}/scriptcli . #working copy available to other SS for generating keys
        if [[ $? -ne 0 ]]; then
            2>&1 echo "KO 50194 scriptcli cannot be found."
            exit 1
        fi
    fi

    mkdir -p ${jail}${gov__configdir}
    mkdir -p ${jail}${gov__datadir}

    if [[ "_${ss_instance}" != "_user" ]]; then
        cp -R ${gov__secrets_dir}/key ${jail}${gov__configdir}/

        # node wallet manages gov address
        mkdir -p ${jail}${wallet__configdir}/keys
        cp -R ${gov__secrets_dir}/key/* ${jail}${wallet__configdir}/keys/
    fi

    load_chain
    print_chain

    if [[ "_${ss_instance}" == "_genesis" ]]; then
        cp ${genesis__gov__secrets_dir}/genesis ${jail}${gov__genesis_file}
    fi

    if [[ -f snapshots/${ss_network}/${ss_instance}/snapshot ]]; then
        echo "found snapshot file at snapshots/${ss_network}/${ss_instance}/snapshot"
        cp snapshots/${ss_network}/${ss_instance}/snapshot ${jail}${gov__snapshot_file} #copy the genesis snapshot (height:0)
    else
        echo "not found any snapshot file at snapshots/${ss_network}/${ss_instance}/snapshot. Using height 0 snapshot"
        cp ${genesis__gov__secrets_dir}/snapshot ${jail}${gov__snapshot_file} #copy the genesis snapshot (height:0)
    fi

    write__mk_snapshot > ${jail}/usr/local/bin/${gov__mk_snapshot_filename}
    chmod +x ${jail}/usr/local/bin/${gov__mk_snapshot_filename}

    generate_gov_config_yaml
    generate_wallet_config_yaml
    generate_gov_hf_cfg

    libsystemd__write_svc ${jail} "${gov__daemon_name}"
    libweb__gen_site ${jail} "${gov__daemon_name}"

    libsystemd__write_svc ${jail} "${wallet__daemon_name}"
    # libweb__gen_site ${jail} "${wallet__daemon_name}" # disabled public access via URL 

    echo
    echo "Generated $(find ${jail}${runtime_configdir} -type f | sed "s#^${jail}\(.*\)#\1#" | wc -l | tr -d ' ') files at: ${jail}"
    echo
    echo "Using secrets from: ${gov__secrets_dir}"
    find ${gov__secrets_dir} -type f | sed "s#^${gov__secrets_dir}/\(.*\)#\1#"
    echo
}

mk_target__cleanup() {
    local jail=$1
    local jailbindir=${jail}${bindir}
    rm -f ${jailbindir}/inspect_data
    rm -f ${jailbindir}/sign_hex_msg
    rm -f ${jailbindir}/import_chain
    rm -f ${jailbindir}/hex_obj_parser
    rm -f ${jailbindir}/encrypt_sk
    rm -f ${jailbindir}/dump_storeview
    rm -f ${jailbindir}/generate_genesis
    rm -f ${jailbindir}/query_db
}

write__mk_snapshot() {
    cat << EOF
#!/bin/bash

url="${gov__api_URL__local}"
cfgdir="${gov__configdir}"

# Fetch the current height
curheight=\$(curl -s -X POST \${url} -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"script.GetStatus","params":{}, "id":"1"}' | jq -r '.result.latest_finalized_block_height')
if [[ -z "\$curheight" || "\$curheight" == "null" ]]; then
  echo "KO 30293 Failed to fetch current height"
  exit 1
fi

# make snapshot
file="\${cfgdir}/backup/snapshot/\$(curl -s -X POST \${url} -H "Content-Type: application/json" -d "{\"jsonrpc\":\"2.0\",\"method\":\"script.BackupSnapshot\",\"params\":{\"config\":\"\${cfgdir}\", \"height\":\${curheight}, \"version\":4}, \"id\":\"1\"}" | jq -r '.result.snapshot_file')"
if [[ -f "\$file" ]]; then
    echo "\$file"
    exit 0
else
    echo "KO 20192"
    exit 1
fi

EOF
}

##OLD:
# disabled file. Woraround as ENV variable
# REMOTERPCENDPOINT:
# right now scriptcli executable doesn't read config file from provided location,
# only from default ~/.scriptcli directory, so saving this for the future when scriptcli
# is fixed
# see file system/be/L1/script4/lib/mk_target.env

wallet_config_yaml() {
    cat << EOF
remoteRPCEndpoint: ${gov__api_URL__local}
CfgDebug: "${wallet__CfgDebug}"
chainID: "${ss_network}"
ethChainID: ${eth_chain_id}

EOF
}

generate_wallet_config_yaml() {
    echo "generate_wallet_config_yaml"
    local ofile=${jail}${wallet__config_file}
    mkdir -p $(dirname ${ofile})
    cat << EOF
## ################################################################
## wallet_config_yaml: ${wallet__config_file}
## ################################################################
EOF
    wallet_config_yaml | tee ${ofile} | sed 's~\(.*\)~## \1~'
    cat << EOF
## ################################################################

EOF
}

gov_config_yaml() {
    cat << EOF
genesis:
  hash: "${genesis_hash}"
  chainID: "${ss_network}"
  ethChainID: ${eth_chain_id}
  license_dir: ${license_dir}
storage:
  statePruningRetainedBlocks: ${gov__statePruningRetainedBlocks}
p2p:
  opt: 0
  port: ${gov__p2p_listen_port}
  seeds: "${gov__seeds}"
  minNumPeers: 1
  maxNumPeers: 12
  natMapping: ${gov__NAT_mapports}
rpc:
  port: ${gov__rpc_listen_port}
  enabled: true
  address: ${gov__rpc_address}
log:
  levels: "${gov__log_levels}"

EOF
}

gov_hf_cfg() {
    cat << EOF
hf1 = ${height__hf1}
EOF
}

generate_gov_config_yaml() {
    local ofile=${jail}${gov__config_file}
    mkdir -p $(dirname ${ofile})
    cat << EOF
## ################################################################
## gov_config_yaml: ${gov__config_file}
## ################################################################
EOF
    gov_config_yaml | tee ${ofile} | sed 's~\(.*\)~## \1~'
    cat << EOF
## ################################################################

EOF
    rewrite_on_deploy ${gov__config_file}
}

generate_gov_hf_cfg() {
    local ofile=${jail}${gov__config_file__hf}
    mkdir -p $(dirname ${ofile})
    cat << EOF
## ################################################################
## hardforks heights: ${gov__config_file__hf}
## ################################################################
EOF
    gov_hf_cfg | tee ${ofile} | sed 's~\(.*\)~## \1~'
    cat << EOF
## ################################################################

EOF
}

generate_stake_deposit() {
    if [[ "_${gov_address}" == "_" ]]; then
        >&2 echo "KO 95586 gov_address is null"
        exit 1
    fi
    cat << EOF
[
  {
    "source" : "$gov_address",
    "holder" : "$gov_address",
    "amount" : "${gov__holder_1__stake_deposit}"
  }
]
EOF
}

generate_coins() {
    cat << EOF
{
  "${gov_address}" : "${gov__holder_1__balance}"
}
EOF
}

print_coins() {
    local file=$1
    echo
    echo "======================================================================"
    echo "== coins:"
    echo "======================================================================"
    cat $file | sed "s~^\(.*\)~== coins> \1~"
    echo "======================================================================"
}

print_stake_deposit() {
    local file=$1
    echo "======================================================================"
    echo "== stake_deposit:"
    echo "======================================================================"
    cat ${file}  | sed "s~^\(.*\)~== stakedep> \1~"
    echo "======================================================================"
}

print_chain() {
    print_coins ${genesis__gov__secrets_dir}/genesis_script_erc20_snapshot.json | nl
    echo
    print_stake_deposit ${genesis__gov__secrets_dir}/genesis_stake_deposit.json | nl
    echo "Genesis block hash: ${genesis_hash}"
}

load_chain() {
    if [[ -f ${genesis__gov__secrets_dir}/genesis ]]; then
        genesis_hash=$(cat ${genesis__gov__secrets_dir}/genesis_hash)
        if [[ -z "${genesis_hash}" ]]; then
            >&2 echo "KO 65899 empty ${genesis__gov__secrets_dir}/genesis_hash"
            exit 1
        fi
        return
    fi
    echo "generating new chain"
    if [[ "_${ss_instance}" != "_genesis" ]]; then
        >&2 echo "KO 77069 ${ss_instance} instance should not be generating the chain"
        exit 1
    fi
    ensure_deps
    generate_coins > ${gov__secrets_dir}/genesis_script_erc20_snapshot.json
    generate_stake_deposit > ${gov__secrets_dir}/genesis_stake_deposit.json
    rm -f /tmp/output
    rm -f /tmp/stderr
    2>/tmp/stderr ./generate_genesis -chainID=${gov__chainID} -erc20snapshot ${gov__secrets_dir}/genesis_script_erc20_snapshot.json -stake_deposit ${gov__secrets_dir}/genesis_stake_deposit.json -genesis ${gov__secrets_dir}/genesis | tee /tmp/output
    if [[ $? -ne 0 ]]; then
        >&2 cat /tmp/stderr
        >&2 echo "KO 66958 generate_genesis"
        exit 1
    fi
    if [[ ! -f ${gov__secrets_dir}/genesis ]]; then
        >&2 cat /tmp/stderr
        >&2 echo "KO 66895 generate_genesis didn't produce the genesis block at ${gov__secrets_dir}/genesis"
        exit 1
    fi
    cp ${gov__secrets_dir}/genesis ${gov__secrets_dir}/snapshot
    genesis_hash=$(cat /tmp/output | grep "Genesis block hash" | awk '{ print $NF }')
    if [[ -z "${genesis_hash}" ]]; then
        >&2 echo "KO 65898 empty ${genesis__gov__secrets_dir}/genesis_hash"
        exit 1
    fi
    echo "${genesis_hash}" > ${gov__secrets_dir}/genesis_hash
    rm -f /tmp/output
    rm -f /tmp/stderr
}

ensure_deps() {
    bin/prebuild
    if [[ ! -x scriptcli ]]; then
        >&2 echo "KO 67007 "
        exit 1
    fi
    if [[ ! -x generate_genesis ]]; then
        >&2 echo "KO 67008 "
        exit 1
    fi
}

build_key() {
    ensure_deps
    gov_address=""
    if [[ ! -f scriptcli ]]; then
        >&2 echo "KO 50392 scriptcli not available - cannot create L1 secrets"
        exit 1
    fi
    mkdir -p ${gov__secrets_dir}
    local output=$(./scriptcli --config ${gov__secrets_dir} key new) 
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 50499"
        exit 1
    fi
    mv ${gov__secrets_dir}/keys ${gov__secrets_dir}/key
    gov_address=$(echo $output | awk '{ print $NF }')
    gov_address=${gov_address:2}
    echo "${gov_address}" > ${gov__address_file} 
    echo "gov_address ${gov_address}"
}

load_key() {
#    echo "load_key"
    if [[ ! -d ${gov__secrets_dir}/key ]]; then
        build_key
    fi
    if [[ ! -f ${gov__address_file} ]]; then
          echo "${gov__address_file}" > /tmp/stop_compilation
          print_stack >> /tmp/stop_compilation
          echo "WA 44392 cannot access ${gov__address_file}."
          return
      fi
      if [[ ! -d ${gov__secrets_dir}/key/plain ]]; then
          echo "${gov__secrets_dir}/key/plain" > /tmp/stop_compilation
          print_stack >> /tmp/stop_compilation
        #>&2 echo "KO 68573 Cannot find key in secret storage. ${gov__secrets_dir}/key/plain"
        #exit 1
        echo "WA 44393 cannot access ${gov__secrets_dir}/key/plain."
        return
    fi
    #check num keys must be exactly one: daemon complains otherwise:
    #[2024-06-07 18:44:32] FATAL Failed to load or create key: Multiple keys detected under /home/stv/testnet/script4/gov/key/plain. Please keep only one key.
    let nc=$(find ${gov__secrets_dir}/key/plain -type f | wc -l | tr -d ' ')
    if [[ $nc -ne 1 ]]; then
        >&2 echo "KO 78868 Only one key must exist in directory ${gov__secrets_dir}/key/plain"
        exit 1
    fi
    gov_address=$(cat ${gov__address_file} | xargs)
}

mk_target__libfn() {
    libss__libfn "${gov__daemon_name}"
    libsystemd__libfn "${gov__daemon_name}"
    libweb__libfn "${gov__daemon_name}"

    libss__libfn "${wallet__daemon_name}"
    libsystemd__libfn "${wallet__daemon_name}"
    libweb__libfn "${wallet__daemon_name}"
}

mk_target__steps__pre_install() {
    libss__steps__pre_install "${gov__daemon_name}"
    libsystemd__steps__pre_install "${gov__daemon_name}"
    libweb__steps__pre_install "${gov__daemon_name}"

    libss__steps__pre_install "${wallet__daemon_name}"
    libsystemd__steps__pre_install "${wallet__daemon_name}"
    libweb__steps__pre_install "${wallet__daemon_name}"
}

mk_target__steps__post_install() {
    libss__steps__post_install "${gov__daemon_name}"
    libsystemd__steps__post_install "${gov__daemon_name}"
    libweb__steps__post_install "${gov__daemon_name}"

    libss__steps__post_install "${wallet__daemon_name}"
    libsystemd__steps__post_install "${wallet__daemon_name}"
    libweb__steps__post_install "${wallet__daemon_name}"
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall "${gov__daemon_name}"
    libsystemd__steps__pre_uninstall "${gov__daemon_name}"
    libweb__steps__pre_uninstall "${gov__daemon_name}"

    libss__steps__pre_uninstall "${wallet__daemon_name}"
    libsystemd__steps__pre_uninstall "${wallet__daemon_name}"
    libweb__steps__pre_uninstall "${wallet__daemon_name}"
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall "${gov__daemon_name}"
    libsystemd__steps__post_uninstall "${gov__daemon_name}"
    libweb__steps__post_uninstall "${gov__daemon_name}"

    libss__steps__post_uninstall "${wallet__daemon_name}"
    libsystemd__steps__post_uninstall "${wallet__daemon_name}"
    libweb__steps__post_uninstall "${wallet__daemon_name}"
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_port "${gov__daemon_name}" ${gov__p2p_listen_port} consensus all
    libss__declare_listening_tcp_port "${gov__daemon_name}" ${gov__rpc_listen_port} http localhost
    libsystemd__declare_listening_tcp_ports "${gov__daemon_name}"
    libweb__declare_listening_tcp_ports "${gov__daemon_name}"

    libss__declare_listening_tcp_port "${wallet__daemon_name}" ${wallet__rpc_listen_port} http localhost
    libsystemd__declare_listening_tcp_ports "${wallet__daemon_name}"
    libweb__declare_listening_tcp_ports "${wallet__daemon_name}"
}

mk_target__systemctl_services() {
    libss__systemctl_services "${gov__daemon_name}"
    libsystemd__systemctl_services "${gov__daemon_name}"
    libweb__systemctl_services "${gov__daemon_name}"

    libss__systemctl_services "${wallet__daemon_name}"
    libsystemd__systemctl_services "${wallet__daemon_name}"
    libweb__systemctl_services "${wallet__daemon_name}"
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared "${gov__daemon_name}"
    libsystemd__systemctl_services__shared "${gov__daemon_name}"
    libweb__systemctl_services__shared "${gov__daemon_name}"

    libss__systemctl_services__shared "${wallet__daemon_name}"
    libsystemd__systemctl_services__shared "${wallet__daemon_name}"
    libweb__systemctl_services__shared "${wallet__daemon_name}"
}

mk_target__libweb_info() {
    libweb__info "${gov__daemon_name}"
    libweb__info "${wallet__daemon_name}"
}

mk_target__amend() {
    local jail=$1
    libss__amend "${jail}" "${gov__daemon_name}"
    libsystemd__amend "${jail}" "${gov__daemon_name}"
    libweb__amend "${jail}" "${gov__daemon_name}"
    mk_target__amend__dont_uninstall_file "${jail}" "${gov__bin_daemon}"

    libss__amend "${jail}" "${wallet__daemon_name}"
    libsystemd__amend "${jail}" "${wallet__daemon_name}"
    libweb__amend "${jail}" "${wallet__daemon_name}"
    mk_target__amend__dont_uninstall_file "${jail}" "${wallet__bin_daemon}"
}
 
mk_target__entry_point() {  # specialization-> contrary to rest of SS, this SS requires to build before producing static conf, which is generated by the tool built.
    local jail=$1
    local m=$2     #machine 
    # special impl. binaries are used to produce secrets

    mk_target__generate_static_conf
    mk_target__build_install ${ss_cache_dir}                #installs in cache directory
    mk_target__transfer_from_cache ${ss_cache_dir} ${jail}
    libss__load_secrets    #creates secrets.env
    mk_target__stats ${jail}
}

mk_target__constructor() {
    . ${system_home}/lib/mk_target/libbuild_systemd.env
    . ${system_home}/lib/mk_target/libbuild_web.env
    libss__constructor
    libsystemd__constructor
    libweb__constructor
}

