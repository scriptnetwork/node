#!/usr/bin/env bash
if [[ -f system.env ]]; then
    . system.env
fi

if [[ "_$1" != "_" ]]; then
    if [[ "_${build_mode}" != "_$1" ]]; then
        echo "Overriding build_mode: ${build_mode}. New value: $1"
        build_mode=$1
    fi
fi

function prepare_sources__0 {
    if [[ ! -d dotool ]]; then
        >&2 echo "KO 66059"
        exit 1
    fi
	local url="https://github.com/scriptnetwork/script-4"
	local branch="master"
	echo "Source code from $url branch $branch"
	mkdir -p _gohome
	pushd _gohome > /dev/null
	    export GOPATH=$(pwd)
	    echo "GOPATH=${GOPATH}"
	    mkdir -p $GOPATH/src/github.com/scripttoken
        pushd $GOPATH/src/github.com/scripttoken > /dev/null
	        if [[ ! -d script ]]; then
		        echo "git clone -b ${branch} --single-branch ${url} script"
		        git clone -b ${branch} --single-branch ${url} script
		        r=$?
		        if [[ $r -ne 0 ]]; then
			        >&2 echo "KO 40397 clone"
			        exit 1
		        fi
		        echo "cloned source code"
                pushd script > /dev/null
                    version_number="$(cat version/version_number.txt)"
                    cat << EOF > version/version_generated.go
package version
const (
  Timestamp = "${build_date}"
  Version = "${version_number}"
  GitHash = "${git_version}"
)

EOF
                popd > /dev/null
	        fi
        popd > /dev/null
    popd > /dev/null
}

function prepare_sources__1 {
	pushd _gohome > /dev/null
	    export GOPATH=$(pwd)
	    echo "GOPATH=${GOPATH}"
	    mkdir -p $GOPATH/src/github.com/scripttoken
        pushd $GOPATH/src/github.com/scripttoken > /dev/null
            rm -f script-eth-rpc-adaptor
            ln -s $(realpath ../../../../../bridge_eth) script-eth-rpc-adaptor
            if [[ $? -ne 0 ]]; then
                >&2 echo "KO 78699"
                exit 1
            fi
        popd > /dev/null
    popd > /dev/null

    version_number="$(cat version/version_number.txt)"
    cat << EOF > version/version_generated.go
package version
const (
  Timestamp = "${build_date}"
  Version = "${version_number}"
  GitHash = "${git_version}"
)
EOF
}

function build_install {
    prepare_sources__0
    prepare_sources__1

    if [[ "_${build_date}" == "_" ]]; then
        build_date="$(date -u)"
    fi
    if [[ "_${git_version}" == "_" ]]; then
        git_version="$(git rev-parse HEAD)"
    fi

    output=_output
    mkdir -p ${output}
    export GOBIN=$(realpath _output)
    echo "GOBIN=${GOBIN}"

    pushd _gohome > /dev/null
        export GOPATH=$(pwd)
    popd > /dev/null
    export BRIDGE_HOME=$GOPATH/src/github.com/scripttoken/script-eth-rpc-adaptor
    echo "GOPATH=${GOPATH}"
    echo "BRIDGE_HOME=${BRIDGE_HOME}"
    pushd ${BRIDGE_HOME} > /dev/null
        echo "compiling in ${build_mode} mode from $(pwd)"
        export GO111MODULE=on
        if [[ "_${build_mode}" == "_release" ]]; then
            #21M script-eth-rpc-adaptor
            go install -ldflags "-s -w" ./cmd/...
        else
            #29M script-eth-rpc-adaptor
            #go install -race ./cmd/...                    #-race option, which add some runtime checks. One the checks gives (kinda) false-positive and crashes program
            go install ./cmd/...
        fi
        r=$?
        if [[ $r -ne 0 ]]; then
            >&2 echo "KO 79622 Compile"
            exit 1
        fi
    popd > /dev/null
}

function filter_errors {
    while read -r line; do
        let is_error=1 #TODO: apply heuristics to determine line is error or debug
        if [[ "$line" == "Cloning into "* ]]; then
            let is_error=0
        elif [[ "$line" == "go: downloading "* ]]; then
            let is_error=0
        fi
        if [[ $is_error -eq 1 ]]; then
            >&2 echo "[cerr] $line"
        else
            echo "[cout] $line"
        fi
    done
}

build_install 2> >(filter_errors)
if [[ $? -ne 0 ]]; then
    >&2 echo "KO 36249"
    exit 1
fi

exit 0

