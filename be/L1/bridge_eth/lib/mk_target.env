#!/bin/bash

mk_target__deps_build__apt() {
    libss__deps_build__apt
    libsystemd__deps_build__apt
    libweb__deps_build__apt
    echo "golang"
}

mk_target__deps_runtime__apt() {
    libss__deps_runtime__apt
    libsystemd__deps_runtime__apt
    libweb__deps_runtime__apt
}

mk_target__build_order__depends() {
    echo "be/L1/script4"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
    #       dest_variable               SS                  instance            network         var          
    resolve gov__api_URL                be/L1/script4       ${ss_instance}      ${ss_network}   gov__api_URL
    resolve gov__api_URL__local         be/L1/script4       ${ss_instance}      ${ss_network}   gov__api_URL__local
    resolve eth_chain_id                be/L1/script4       ${ss_instance}      ${ss_network}   eth_chain_id
    resolve gov__svcname                be/L1/script4       ${ss_instance}      ${ss_network}   gov__svcname
    resolve be_explorer__URL            be/explorer         ${ss_instance}      ${ss_network}   URL
    resolve fe_explorer__URL            fe/explorer         ${ss_instance}      ${ss_network}   URL
}

mk_target__set_vars() {
    #---------------------- subsystem
    ss_version="1.0"
    ss_test__delay="0"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #------------------------ daemon
    libdir=""
    configdir="/home/${runuser}/$(tgt_path__compute bridge_eth)"
    runtime_config="${configdir}/config.yaml"
    bindir="/usr/local/bin"
    logdir="/var/log"
    bin_daemon="${system_unix_name}__bridge_eth"
    if [[ "_${build_mode}" == "_debug" ]]; then #loglevel possible values: error warn info verbose debug
        log_levels="*info"
    else
        log_levels="*error"
    fi
    workdir="/home/${runuser}"
    exec_line="${bindir}/${bin_daemon} start --config=${configdir}"
    after_svc="${gov__svcname}"

    #------------------------- systemd
    daemon_name=""
    libsystemd_input__workdir="${workdir}"
    libsystemd_input__exec_line="${exec_line}"
    libsystemd_input__after_svc="${after_svc}"
    libsystemd__set_vars "${daemon_name}"

    #------------------------ config
    build_config="dotool/dotool.env"
    rpc_bind_address__http="127.0.0.1"
    rpc_bind_address__ws="127.0.0.1"
    timeoutSecs=600
    maxConnections=2048

    #------------------------- ports
#    local listen_port__http__mainnet=12174
#    local listen_port__ws__mainnet=12175
#    local listen_port__http__testnet=11174
#    local listen_port__ws__testnet=11175
#    local var="listen_port__http__${ss_network}";
    rpc_listen_port__http=$(reserve_port "${daemon_name}http") #${!var}
#    local var="listen_port__ws__${ss_network}";
    rpc_listen_port__ws=$(reserve_port "${daemon_name}ws") #${!var}
    net_interface="127.0.0.1"

    #----------------------- libweb
    webmode="proxy"
    hostname="$(p2p_hostname_rewrite eth-node)"
    url_path="rpc"
    libweb__set_vars "${daemon_name}" "${webmode}" "${daemon_name}" "${rpc_listen_port__http}" "${hostname}" "${url_path}"

    #----------------------- pub
    svcname="$(libsystemd__peek svc__svcname)"
    URL="$(liburl__peek URL)"
    URL_nopath="$(liburl__peek URL_nopath)"
    URL_local="http://localhost:${rpc_listen_port__http}/rpc"

}

function mk_target__vars__echo {
    libss__vars__echo
    libsystemd__vars__echo "${daemon_name}"
    libweb__vars__echo "${daemon_name}"
    mk_target__vars__echo__header
    cat << EOF
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
gov__api_URL="${gov__api_URL}"
gov__api_URL__local="${gov__api_URL__local}"
gov__svcname="${gov__svcname}"
libdir="${libdir}"
configdir="${configdir}"
runtime_config="${runtime_config}"
bindir="${bindir}"
logdir="${logdir}"
bin_daemon="${bin_daemon}"
log_levels="${log_levels}"
workdir="${workdir}"
exec_line="${exec_line}"
after_svc="${after_svc}"
daemon_name="${daemon_name}"
libsystemd_input__workdir="${libsystemd_input__workdir}"
libsystemd_input__exec_line="${libsystemd_input__exec_line}"
libsystemd_input__after_svc="${libsystemd_input__after_svc}"
rpc_bind_address__http="${rpc_bind_address__http}"
rpc_bind_address__ws="${rpc_bind_address__ws}"
timeoutSecs="${timeoutSecs}"
maxConnections="${maxConnections}"
rpc_listen_port__http="${rpc_listen_port__http}"
rpc_listen_port__ws="${rpc_listen_port__ws}"
net_interface="${net_interface}"
webmode="${webmode}"
hostname="${hostname}"
url_path="${url_path}"
build_config="${build_config}"
eth_chain_id="${eth_chain_id}"

EOF
}


# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets

function mk_target__generate_static_conf {
    mk_target__vars__echo > system.env
    echo "## build_config ###########################################"
    echo "## file: ${build_config}"
    echo "###########################################################"
    mkdir -p $(dirname ${build_config})
    cat << EOF | tee ${build_config} | sed "s~\(.*\)~## \1~"
# all instances of all networks share the same compiled binaries. Customize using config files readable at runtime.  
# don't define anything that should be different for the different networks and instances.

EOF
}

function mk_target__build_install {
    local ss_cache_dir=$1
    local arch=$(uname -m)

    if [[ -d ${ss_cache_dir}/${arch} ]]; then
        return
    fi
    bin/build_install
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 66978 Compilation failed"
        exit 1
    fi
    echo "binaries produced at _output"
    mkdir -p ${ss_cache_dir}/${arch}
    cp -R _output/* ${ss_cache_dir}/${arch}/
}

function generate_config_yaml {
    local jail=$1
    local ofile=${jail}${runtime_config}
    mkdir -p $(dirname ${ofile})
echo "## runtime_config #########################################"
echo "## file: ${runtime_config}"
echo "###########################################################"
    cat << EOF | tee ${ofile} | sed "s~\(.*\)~## \1~"
script:
  rpcEndpoint: "${gov__api_URL__local}"
  chainID: "${ss_network}"
  ethChainID: ${eth_chain_id}
node:
  skipInitializeTestWallets: true
rpc:
  enabled: true
  httpAddress: ${rpc_bind_address__http}
  httpPort: ${rpc_listen_port__http}
  wsAddress: "${rpc_bind_address__ws}"
  wsPort: ${rpc_listen_port__ws}
  timeoutSecs: ${timeoutSecs}
  maxConnections: ${maxConnections}
log:
  levels: "${log_levels}"

EOF
echo "###########################################################"
echo
}

#function fn_headers {
#    libweb__CORS_header ${fe_explorer__URL}
#}

function mk_target__transfer_from_cache {
    local ss_cache_dir=$1
    local jail=$2
    arch=$(uname -m)
    if [[ ! -d ${ss_cache_dir}/${arch} ]]; then
        >&2 echo "KO 76882 arch not found in cache. ${ss_cache_dir}/${arch}"
        exit 1
    fi
    local runtime_bindir=${jail}${bindir}
    if [[ ! -f ${runtime_bindir}/${bin_daemon} ]]; then
        mkdir -p ${runtime_bindir}
        cp ${ss_cache_dir}/${arch}/* ${runtime_bindir}/
        mv ${runtime_bindir}/script-eth-rpc-adaptor ${runtime_bindir}/${bin_daemon}
    fi

    generate_config_yaml ${jail}

    libsystemd__write_svc ${jail} "${daemon_name}"
    libweb__gen_site ${jail} "${daemon_name}"

    echo
    echo "Generated $(find ${jail}${configdir} -type f | sed "s#^${jail}\(.*\)#\1#" | wc -l | tr -d ' ') files at: ${jail}"
    find ${jail}${configdir} -type f | sed "s#^${jail}\(.*\)#\1#"
    echo
    echo "Using secrets from: ${secrets_dir}"
    find ${secrets_dir} -type f | sed "s#^${secrets_dir}/\(.*\)#\1#"
    echo
}

function mk_target__libfn {
    libss__libfn "${daemon_name}"
    libsystemd__libfn "${daemon_name}"
    libweb__libfn "${daemon_name}"
}

function mk_target__steps__pre_install {
    libss__steps__pre_install "${daemon_name}"
    libsystemd__steps__pre_install "${daemon_name}"
    libweb__steps__pre_install "${daemon_name}"
}

function mk_target__steps__post_install {
    libss__steps__post_install "${daemon_name}"
    libsystemd__steps__post_install "${daemon_name}"
    libweb__steps__post_install "${daemon_name}"
}

function mk_target__steps__pre_uninstall {
    libss__steps__pre_uninstall "${daemon_name}"
    libsystemd__steps__pre_uninstall "${daemon_name}"
    libweb__steps__pre_uninstall "${daemon_name}"
}

function mk_target__steps__post_uninstall {
    libss__steps__post_uninstall "${daemon_name}"
    libsystemd__steps__post_uninstall "${daemon_name}"
    libweb__steps__post_uninstall "${daemon_name}"
}

function mk_target__declare_listening_tcp_ports {
    libss__declare_listening_tcp_port "${daemon_name}" ${rpc_listen_port__http} http localhost
    libss__declare_listening_tcp_port "${daemon_name}" ${rpc_listen_port__ws} websockets localhost
    libsystemd__declare_listening_tcp_ports "${daemon_name}"
    libweb__declare_listening_tcp_ports "${daemon_name}"
}

function mk_target__systemctl_services__shared {
    libss__systemctl_services__shared "${daemon_name}"
    libsystemd__systemctl_services__shared "${daemon_name}"
    libweb__systemctl_services__shared "${daemon_name}"
}

function mk_target__systemctl_services {
    libss__systemctl_services "${daemon_name}"
    libsystemd__systemctl_services "${daemon_name}"
    libweb__systemctl_services "${daemon_name}"
}

function mk_target__libweb_info {
    libweb__info "${daemon_name}"
}

function mk_target__amend {
    local jail=$1
    libss__amend $jail "${daemon_name}"
    libsystemd__amend $jail "${daemon_name}"
    libweb__amend $jail "${daemon_name}"
    mk_target__amend__dont_uninstall_file $jail "${bindir}/${bin_daemon}"
}

function mk_target__constructor {
    . ${system_home}/lib/mk_target/libbuild_systemd.env
    . ${system_home}/lib/mk_target/libbuild_web.env
    libss__constructor
    libsystemd__constructor
    libweb__constructor
}

