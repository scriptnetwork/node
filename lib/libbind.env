#!/bin/bash
#######################################################
##  Generated file - do not edit.
#######################################################
#######################################################
##  Generated file - do not edit.
#######################################################

bind__domain="example.com"
bind__tempfile_pfx="libbind_xx3343"

bind__mailer_bootstrap() {
    cat << EOF
STAGE
=====

root@ip-172-31-21-255:~# cat /etc/mailname
mail.stage.cto.script.tv

======== postfix ========

#as per https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-debian-10

system mail name: stage.cto.script.tv

milter_default_action = accept
milter_protocol = 6
smtpd_milters = unix:/var/spool/postfix/opendkim/opendkim.sock
non_smtpd_milters = unix:/var/spool/postfix/opendkim/opendkim.sock




========= DKIM ===========
root@ip-172-31-21-255:~# cat /etc/opendkim.conf | grep -v "^#.*" | grep -v '^$'
Syslog			yes
SyslogSuccess		yes
Canonicalization	relaxed/simple
OversignHeaders		From
Domain			stage.cto.script.tv
Selector		mail
KeyFile		    /etc/dkimkeys/mail.private
UserID			opendkim
UMask			007
Socket			local:/var/spool/postfix/opendkim/opendkim.sock
PidFile			/run/opendkim/opendkim.pid
TrustAnchorFile		/usr/share/dns/root.key

mkdir  /var/spool/postfix/opendkim
chown opendkim:postfix /var/spool/postfix/opendkim
chmod 750 /var/spool/postfix/opendkim

opendkim-genkey -s mail -d cto.script.tv


cat /etc/dkimkeys/mail.txt
mail._domainkey	IN	TXT	( "v=DKIM1; h=sha256; k=rsa; "
	  "p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArGSJdJEq7zp3G0oOzpkblqX/uM7livOah92ySA5tUKaKwdncN0LBARUCXvpVZHQTYABZtp2O1/f0OnDEdPUVTStdfZ0GhamqEnYdgI9A/QNzi88huJsh4BEJflVabPT85ZrTiMJoh2N/vo36lkSoYqkaZvU2c3nEX8lksqjsqSIQoUIkiO4gkpKr3EVpHaP+b5Eg6x9ctz8TCu"
	  "dESjLNticYNtLaMfBc9A6WoEbIdVKmuFeNeQ2c/pXpL+O/+T8DyPtZXLAJ+jjRDpbWuhmI05NtJ0PY5r2cAVobiGsbSn4sJqmvVGG51qSOk6F/3w8Q1O+egj1Fm1bLcE4mbvtBxwIDAQAB" )  ; ----- DKIM key mail for stage.cto.script.tv

EOF
}

bind__ssh() {
    echo "========>ssh $@"
    ssh $@
}

bind__scp() {
    echo "========>scp $@"
    scp $@
}

bind__rm() {
    local file=$1
    echo "-------------------------------------------$file"
    cat $file
    echo
    rm $file
}

#========================================================================
#
# named_conf_local
#

bind__conf_local__subdomain() {
    local subdomain=$1
    cat << EOF
zone "${subdomain}${bind__domain}" {
    type master;
    file "/etc/bind/zones/db.${subdomain}${bind__domain}";
};

EOF
}

bind__conf_local__top_zone() {
    bind__conf_local__subdomain ""
}


bind__conf_local__hot() {
    for dev in ${team}; do
        bind__conf_local__subdomain "${dev,,}."
    done
}

bind__conf_local__stage() {
    bind__conf_local__subdomain "stage."
}

bind__conf_local() {
    echo
    bind__conf_local__top_zone
    bind__conf_local__stage
    bind__conf_local__hot

}

#========================================================================

bind__top_zone__header_for() {
    local output_for=$1
    libvmpool__vm_as ${bind__vm__pri} ns1
    libvmpool__vm_as ${bind__vm__red} ns2
    libvmpool__vm_as ${output_for} of
    cat << EOF
;
; BIND data file for ${bind__domain}
;
\$TTL   604800
\$ORIGIN ${bind__domain}.
@   IN  SOA cto.script.tv. root.${bind__domain}. (
             ${bind_serial}     ; Serial
             604800     ; Refresh
              86400     ; Retry
            2419200     ; Expire
             604800 )   ; Negative Cache TTL

    IN  NS  ns1.${bind__domain}.
    IN  NS  ns2.${bind__domain}.

@   IN  A   ${of__ip}
ns1 IN  A   ${ns1__ip}
ns2 IN  A   ${ns2__ip}

EOF
}

bind__top_zone__records__mailer() {
    local zone=${bind__domain}
    local vm1=$1
    echo "; mail"
    libvmpool__vm_as ${vm1} m0
    local lovmname="$(vm_pool__lovmname $vm1)"
    echo "mail IN  A   ${m0__ip}"
    echo "${zone}. IN MX 10    mail.${zone}."
    echo
    echo "; mail. SPF"
    echo "${zone}.    IN    TXT    \"v=spf1 ip4:${m0__ip} -all\""
    echo
    cat << EOF
; DKIM
mail._domainkey	IN	TXT	( "v=DKIM1; h=sha256; k=rsa; "
	  "p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3ESmP8sqV/RRrqkOo3WDVJbpQI78IA5eTzoIzVWal9wrYbmAYm41vt9Xulr9SUhTbQM0tGmkYfiIoKoki2NPcd3hjgDq0FC8rphk5jlSiBKyzupkkBSvocAMApKxrKI5Le//LmLlBf2rX5bAD4bttUdRLY3c6ERoA06C/LWaPAy7GXt5OZp6JM0T9vPJ9SB7Ml2+C9zV4JMjzq"
	  "v27p37pg0aBkquchFCPfQjfvOO3rvvwKlRgj+gUIAn/rnbSEZPrfihMQEFZz+3NGd1GpOGXgno7EfLxmnRa/g47KYRWTMeT3g0GQnIcEFr+XDTDdQF8PJaHsTkmrp5YO1Nt0/e4wIDAQAB" )  ; ----- DKIM key mail for cto.script.tv

EOF
}

bind__top_zone__records__pool() {
    echo "; VM pool"
    for vm in $(list_vm); do
        libvmpool__vm_as $vm m0
        local lovmname="$(vm_pool__lovmname $vm)"
        echo "${lovmname} IN A ${m0__ip}"
    done
    echo
}

bind__top_zone__records__dev() {
    local dev=$1
    local ns1=$(libvmpool__dnsname ${bind__vm__pri})
    local ns2=$(libvmpool__dnsname ${bind__vm__red})
    echo "; [${dev}]"
    #echo "${dev,,} IN CNAME ${n}."
    echo "${dev,,} IN NS ${ns1}."
    echo "${dev,,} IN NS ${ns2}."
    echo
}

bind__top_zone__records__hot() {
    for dev in ${team}; do
        bind__top_zone__records__dev $dev
    done
}

bind__top_zone__records__stage() {
    local dev=$1
    local ns1=$(libvmpool__dnsname ${bind__vm__pri})
    local ns2=$(libvmpool__dnsname ${bind__vm__red})
    echo "; stage"
    echo "stage IN NS ${ns1}."
    echo "stage IN NS ${ns2}."
    echo
}

#
# db.${bind__domain}
#

bind__top_zone() {
    local vmns=$1
    local ofile=/tmp/${bind__tempfile_pfx}__db.${bind__domain}
    bind__top_zone__header_for ${vmns} > ${ofile}
    bind__top_zone__records__pool >> ${ofile}
    bind__top_zone__records__mailer INF_stage__SMTP >> ${ofile}
    bind__top_zone__records__stage >> ${ofile}
    bind__top_zone__records__hot >> ${ofile}
}

#-----------

bind__subzone__header_for() {
    local subdomain=$1
    if [[ "_${subdomain}" != "_" ]]; then
        local zone=${subdomain}.${bind__domain}
    else
        local zone=${bind__domain}
    fi
    libvmpool__vm_as ${bind__vm__pri} ns1
    libvmpool__vm_as ${bind__vm__red} ns2

    cat << EOF
;
; BIND data file for ${zone}
;
\$TTL   604800
\$ORIGIN ${zone}.
@   IN  SOA ${zone}. root.${zone}. (
             ${bind_serial}     ; Serial
             604800     ; Refresh
              86400     ; Retry
            2419200     ; Expire
             604800 )   ; Negative Cache TTL

EOF
    if [[ "_${subdomain}" != "_" ]]; then
        cat << EOF
    IN  NS  ns1.${zone}.
    IN  NS  ns2.${zone}.

; glue records
ns1 IN A ${ns1__ip}
ns2 IN A ${ns2__ip}

EOF

    fi
}

#========================================================================

bind__hot_zones__dev() {
    local vmns=$1
    local dev=$2
    local var=VM__${dev};
    VM__dev="${!var}"
    if [[ ! -z "${VM__dev}" ]]; then
        bind__subzone__header_for ${dev,,}
        libvmpool__vm_as ${VM__dev} m0
        echo "@   IN  A ${m0__ip}"
    fi
}

bind__hot_zones() {
    local vmns=$1
    for dev in ${team}; do
        bind__hot_zones__dev $vmns $dev > /tmp/${bind__tempfile_pfx}__db.${dev,,}.${bind__domain}
    done
}

bind__stage_zones() {
    local vmns=$1
    local ofile=/tmp/${bind__tempfile_pfx}__db.stage.${bind__domain}
    bind__subzone__header_for stage > ${ofile}
}


bind__zones() {
    local vmns=$1
    bind__top_zone ${vmns}
    bind__stage_zones ${vmns}
    bind__hot_zones ${vmns}
}
#--------------------------------

bind__gen_files() {
    local vmns=$1
    bind__conf_local | sed "s~\(.*\)~\1        #//--ctotool~" | column -t -s '#' > /tmp/${bind__tempfile_pfx}__named_conf_local
    bind__zones $vmns
}

bind__upload_files__top_zone() {
    local vmns=$1
    libvmpool__vm_as ${vmns} ns
    # named.conf.local
    ssh root@${ns__ip} "cat /etc/bind/named.conf.local" | grep -v "//--ctotool" > /tmp/${bind__tempfile_pfx}__named.conf.local__new
    cat /tmp/${bind__tempfile_pfx}__named_conf_local >> /tmp/${bind__tempfile_pfx}__named.conf.local__new
    bind__scp /tmp/${bind__tempfile_pfx}__named.conf.local__new root@${ns__ip}:/etc/bind/named.conf.local
    bind__rm /tmp/${bind__tempfile_pfx}__named.conf.local__new
    # top zone file
    bind__scp /tmp/${bind__tempfile_pfx}__db.${bind__domain} root@${ns__ip}:/etc/bind/zones/db.${bind__domain}
    bind__rm /tmp/${bind__tempfile_pfx}__db.${bind__domain}
}

bind__upload_files__hot_zones__dev() {
    local vmns=$1
    local dev=$2
    libvmpool__vm_as ${vmns} ns
    ##only if it doesn't exist
    local exists=$(ssh root@${ns__ip} "[[ ! -f /etc/bind/zones/db.${dev,,}.${bind__domain} ]] && echo 'DOESNT EXIST'")
    if [[ "_${exists}" == "_DOESNT EXIST" ]]; then
        echo "uploading initial zone file for dev ${dev,,}"
        bind__scp /tmp/${bind__tempfile_pfx}__db.${dev,,}.${bind__domain} root@${ns__ip}:/etc/bind/zones/db.${dev,,}.${bind__domain}
    else
        echo "zone file for dev ${dev,,} already in server."
    fi
    bind__rm /tmp/${bind__tempfile_pfx}__db.${dev,,}.${bind__domain}
}

bind__upload_files__hot_zones() {
    local vmns=$1
    for dev in ${team}; do
        bind__upload_files__hot_zones__dev $vmns $dev
    done
}

bind__upload_files__stage_zones() {
    local vmns=$1
    libvmpool__vm_as ${vmns} ns
    ##only if it doesn't exist
    local exists=$(ssh root@${ns__ip} "[[ ! -f /etc/bind/zones/db.stage.${bind__domain} ]] && echo 'DOESNT EXIST'")
    if [[ "_${exists}" == "_DOESNT EXIST" ]]; then
        echo "uploading initial zone file for stage"
        bind__scp /tmp/${bind__tempfile_pfx}__db.stage.${bind__domain} root@${ns__ip}:/etc/bind/zones/db.stage.${bind__domain}
    else
        echo "zone file for stage already in server."
    fi
    bind__rm /tmp/${bind__tempfile_pfx}__db.stage.${bind__domain}
}

bind__upload_files() {
    local vmns=$1
    bind__upload_files__top_zone ${vmns}
    bind__upload_files__hot_zones ${vmns}
    bind__upload_files__stage_zones ${vmns}

    libvmpool__vm_as ${vmns} ns
    ssh root@${ns__ip} "rndc reload"
}

update_bind__ns() {
    local vmns=$1
    bind__gen_files ${vmns}
    bind__upload_files ${vmns}
}

increase_serial() {
    local serial=$(date +%s)
    stcfg__set_value bind_serial ${serial}
}

update_bind() {
    increase_serial

    rm -f /tmp/${bind__tempfile_pfx}__named_conf_local
    rm -f /tmp/${bind__tempfile_pfx}__db.*

    echo
    echo "************************************************************"
    echo "******************* PRIMARY DNS SERVER *********************"
    echo "************************************************************"
    update_bind__ns ${bind__vm__pri}
    echo
    echo "************************************************************"
    echo "******************* REDUNDANT DNS SERVER *******************"
    echo "************************************************************"
    update_bind__ns ${bind__vm__red}
    echo
    echo "************************************************************"
    echo "Updated DNS servers"
    libvmpool__print_vm ${bind__vm__pri}
    libvmpool__print_vm ${bind__vm__red}
}

bind__A_record() {
    local vm=$1
    libvmpool__vm_as ${vm} m0
    local ip=${m0__ip}
    local name=$(vm_pool__lovmname $vm)
    echo "${name} IN A ${ip}" 
}

bind__subzone__hosts_file__ext0() {
    local subdomain=$1
    local hosts_file=$2
    local prevvm=""
    vms=$(cat $hosts_file | awk '{ print $2 }' | sort | uniq)
    for vm in $vms; do
        bind__A_record $vm
    done
    echo
    cat $hosts_file | sort | while read -r line; do
        local h=$(echo "$line" | awk '{ print $1 }')
        h=${h%.}
        local vm=$(echo "$line" | awk '{ print $2 }')
        if [[ "_${vm}" != "_${prevvm}" ]]; then
            local name=$(vm_pool__lovmname $vm)
            prevvm=$vm            
        fi
        echo "${h} IN CNAME ${name}.${domain}." 
    done
}

bind__subzone__hosts_file0() {
    local subdomain=$1
    local hosts_file=$2
    local prevvm=""
    while read -r line; do
        local h=$(echo "$line" | awk '{ print $1 }')
        h=${h%.}
        local vm=$(echo "$line" | awk '{ print $2 }')
        if [[ "_${vm}" != "_${prevvm}" ]]; then
            libvmpool__vm_as ${vm} m0
            local server_name=${m0__server_name}
            local server_ip=${m0__ip}
            prevvm=$vm
        fi
        if [[ "_${h}" == "_@" ]]; then
            echo "@ IN  A ${server_ip}"
        else
            echo "${h} IN CNAME ${server_name}."
        fi
    done < $hosts_file
}

bind__subzone__hosts_file() {
    local subdomain=$1
    local hosts_file=$2
    increase_serial > /dev/null
    bind__subzone__header_for ${subdomain}
    bind__subzone__hosts_file0 "${subdomain}" "${hosts_file}" | column -t -s ' '
    echo
}

bind__subzone__hosts_file__ext() {
    local subdomain=$1
    local hosts_file=$2
    bind__subzone__header_for ${subdomain}
    bind__subzone__hosts_file__ext0 "${subdomain}" "${hosts_file}" | column -t -s ' '
    echo
}

bind__upload_zone_file__ns() {
    local file=$1
    local nsvm=$2
    libvmpool__vm_as ${nsvm} ns
    echo "Uploading $file to name server ${nsvm}"
    bind__scp $file root@${ns__server_name}:/etc/bind/zones/
    echo "rndc reload server ${nsvm}"
    ssh root@${ns__server_name} "rndc reload"
}

bind__upload_zone_file() {
    local file=$1
    bind__upload_zone_file__ns $file ${bind__vm__pri}
    bind__upload_zone_file__ns $file ${bind__vm__red}
}

bind__init() {
    bind__vm__pri="${INF_DNS__ns1}"  #vmpool vm
    bind__vm__red="${INF_DNS__ns2}"

}
