#!/bin/bash

libdevtool__root_worktree=""
libdevtool__worktree=""
libdevtool__head=""
libdevtool__branch=""

libdevtool__stcfg__sets() {
   echo "dev"
}

libdevtool__stcfg__on_new_version() {
    local fromversion=$1
    echo "New config version"
    if [[ "_${fromversion}" == "_8" ]]; then
        stcfg__set_value dev_handle ${hot_handle}
    fi
    if [[ "_${fromversion}" == "_9" ]]; then
        stcfg__set_value dev_branch ${dev_handle}/main
        stcfg__set_value stage_branch ${dev_handle}/stage
    fi
    if [[ "_${fromversion}" == "_10" ]]; then
        stcfg__set_value stage_branch ${dev_handle}/stage
    fi
}

libdevtool__stcfg__version() {  # <key>  <default value>
    echo "11"
}

libdevtool__stcfg__dev__vars() {  # <key>  <default value>
    cat << EOF
dev_handle                  XX
dev_branch                  XX/main
stage_branch                XX/stage
merger_handle               MM
merger_branch               MM/stage

dev_secrets_prefix          _dev_secrets
root_ca__domain             cto.script.tv
enforce_xx_ca_cert          yes
io_state                    out
EOF
}

libdevtool__deliver_msg() {
    local human_title="$1"
    local file=$2
    if [[ "_${dev_handle}" == "_XX" ]]; then
        >&2 echo "KO 92112 your dev_handle is XX or not set. Run bin/devtool set_sev"
        exit 1
    fi
    echo "#######################################################"
    echo "## message team"
    echo "#######################################################"
    cat $file | sed 's~\(.*\)~## \1~'
    echo "#######################################################"
    echo
    echo "CTO node (34.39.80.254:7000)"
    echo "Send? [ctrl-c]: "
    read x
    r2r_cto2dev__send_message "[${dev_handle}]" "${human_title}" ${file}
    echo
}

libdevtool__deliver_msg__noask() {
    local human_title="$1"
    local file=$2
    if [[ "${dev_handle}" == "XX" ]]; then
        >&2 echo "KO 92112 your dev_handle is XX or not set. Run bin/devtool set_sev"
        exit 1
    fi
    r2r_cto2dev__send_message "[${dev_handle}]" "${human_title}" ${file}
}

libdevtool__enforce_ca_cert() {
    if [[ "${enforce_xx_ca_cert}" != "yes" ]]; then
        return
    fi
    if [[ "${devuser}" == "xx" ]]; then
        return
    fi
    if [[ -z "${devuser}" ]]; then
        print_stack
        >&2 echo "KO 58477 devuser is empty."
        exit 1
    fi
    local ca_domain=${root_ca__domain}
    local pub_root_cert_file=${libcrypto__ca_pub_dir}/${root_ca__domain}__CA.crt
    if [ ! -f ${pub_root_cert_file} ]; then
        echo "Root CA cert not found for $ca_domain at ${libcrypto__ca_pub_dir}/"
        libcrypto__create_root_CA_cert "${ca_domain}"
        if [ ! -f ${pub_root_cert_file} ]; then
            >&2 echo "KO 58695 Root CA cert could not be created for ${ca_domain}."
            exit 1
        fi
    fi
    local domain="${devuser}.${ca_domain}"
    local pub_cert_file=${libcrypto__ca_pub_dir}/${domain}__CA.crt
    if [[ -f ${pub_cert_file} ]]; then
        return
    fi
    if [[ $(libcrypto__can_sign_CSR ${ca_domain}) == "true" ]]; then
        libcrypto__gen_CA_cert0 ${domain} ${ca_domain}
        local key_file=${libcrypto__ca_secret_dir}/${domain}__CA.key
        if [[ ! -f ${key_file} ]]; then
            >&2 echo "KO 81970 Secret key for domain ${domain} not found at ${key_file}. pub_cert_file ${pub_cert_file}"
            exit 1
        fi
        return
    fi
    echo "CA cert not found for $domain at ${libcrypto__ca_pub_dir}/"
    echo "Querying it..."
    libdevtool__query_cert "${domain}" "${ca_domain}" ${pub_cert_file}
    echo "Received cert at ${pub_cert_file}"
}

libdevtool__query_cert() {
    local domain=$1               # example.com        cto.script.tv       mm.cto.script.tv
    local ca_domain=$2            # com                script.tv           cto.script.tv
    local pub_cert_file=$3
    if [[ "_${dev_handle}" == "_XX" ]]; then
        >&2 echo "KO 99433 your dev_handle is XX or not set. Run bin/devtool set_sev"
        exit 1
    fi
    local csr="/tmp/csr_5586.csr"
    local cfg="/tmp/xzxcnr555.cnf"
    echo "query_cert ${domain} ${ca_domain}"
    libcrypto__create_CA_cert__CSR "${domain}" "${ca_domain}" ${csr} ${cfg}
    if [[ -z ${ca_domain} ]]; then #Root CA
        >&2 echo "KO 55049 zero chances of being granted Root CA."
        exit 1
    fi
    r2r_cto2dev__dev__hdr "${dev_handle}" "cert_request" > /tmp/message
    cat << EOFX >> /tmp/message
arg CSR
domain ${domain}
ca_domain ${ca_domain}
EOFX
    echo -n "CSR " >> /tmp/message
    cat ${csr} | base64 -w0 >> /tmp/message
    echo >> /tmp/message
    echo -n "CFG " >> /tmp/message
    cat ${cfg} | base64 -w0 >> /tmp/message
    echo "" >> /tmp/message
    echo "eof" >> /tmp/message
    local response=$(libdevtool__deliver_msg__noask "CERT-REQUEST" /tmp/message)
    rm -f /tmp/message
    rm -f ${csr}
    rm -f ${cfg}
    echo "$response" | jq -r '.output[]' > ${pub_cert_file}
}

libdevtool__deps_build__apt() {
    local apt="make"
    echo $apt
}

libdevtool__deps_runtime__apt() {
    local apt="curl jq meld tmux asciinema $(libconfigure__deps_runtime__apt | xargs)"
    echo $apt
}

libdevtool__init__home() {
    if [[ ! -z "${dev_datadir}" ]]; then
        return    #home already set
    fi
    if [[ -z "${libdevtool__home}" ]]; then
        libdevtool__home=${HOME}
    fi
    if [[ ! -d "${libdevtool__home}" ]]; then
        >&2 echo "KO 15943 home dir ${libdevtool__home} doesn't exist."
        exit 1
    fi
    libdevtool__home=$(realpath ${libdevtool__home})
    libdevtool__progname="devtool"
    dev_datadir=${libdevtool__home}/.${libdevtool__progname}
    mkdir -p ${dev_datadir}
}

libdevtool__generate_random_secret_file() {
    cat << EOF
version="3"
github_access_token=""
grok_apikey=""

EOF
}

is_worktree() {
    [[ -f .git ]]
}

libdevtool__load_secrets() {
    local f=${dev_secrets_root}/devtool.env
    if [[ ! -f $f ]]; then #secret bag is virgin. Write a random unique values.
        mkdir -p ${dev_secrets_root}
        libdevtool__generate_random_secret_file > $f
    fi
    . $f
}

libdevtool__init__secrets() {
    if [[ -z "${dev_secrets_prefix}" ]]; then
        >&2 echo "KO 77961 dev_secrets_prefix is empty. check ${dev_datadir} "
        exit 1
    fi
    dev_secrets_root="${dev_secrets_prefix}_${dev_handle}"
    if ! is_abs_path ${dev_secrets_root}; then
        dev_secrets_root=$(realpath ${libdevtool__root_worktree}/${dev_secrets_root})
    fi
    if [[ ! -d ${dev_secrets_root} ]]; then
        mkdir -p ${dev_secrets_root} || {
            >&2 echo "KO 45988 secrets drive don't exist and cannot be created. ${dev_secrets_root}"
            exit 1
        }
    fi
    libdevtool__load_secrets
}

libdevtool__init2() {
    libdevtool__init__secrets
    . lib/libcrypto.env
    local ca_secret_dir=${dev_secrets_root}/ca
    local ca_pub_dir=${libdevtool__root_worktree}/ca
    local ssl_secret_dir=${secrets_root}/ssl/certs
    local ssl_pub_dir=${secrets_root}/ssl/certs
    libcrypto__init "${ca_secret_dir}" "${ca_pub_dir}" "${ssl_secret_dir}" "${ssl_pub_dir}"
}

print_git_info() {
    cat << EOF
libdevtool__root_worktree="${libdevtool__root_worktree}"
libdevtool__worktree="${libdevtool__worktree}"
libdevtool__head="${libdevtool__head}"
libdevtool__branch="${libdevtool__branch}"

EOF
}

libdevtool__ensure_ref() {
    git worktree list | grep "^${libjobs__root_worktree}/ref " > /dev/null || {
        git worktree add ${libjobs__root_worktree}/ref ${libjobs__ref}
        return
    }
    pushd ${libjobs__root_worktree}/ref > /dev/null
        local curbranch=$(git rev-parse --abbrev-ref HEAD)
        if [[ "${curbranch}" != "${libjobs__ref}" ]]; then
            echo "checking out ${libjobs__ref} in worktree ref/"
            git checkout ${libjobs__ref} || { >&2 echo "KO 60593 Problem checking out ${libjobs__ref} in worktree ref/"; exit 1; }
        fi
    popd > /dev/null
}

libdevtool__ensure_stage() {
    # bootstrap an stage branch & worktree if missing
    if ! branch_exists "${libjobs__stage}"; then
        echo "forking ${libjobs__stage} from ${libjobs__ref}"
        git branch ${libjobs__stage} ${libjobs__ref}
    fi
    git worktree list | grep "^${libjobs__root_worktree}/jobs_stage " > /dev/null || {
        git worktree add ${libjobs__root_worktree}/jobs_stage ${libjobs__stage}
    }
    pushd ${libjobs__root_worktree}/jobs_stage > /dev/null
        local curbranch=$(git rev-parse --abbrev-ref HEAD)
        if [[ "${curbranch}" != "${libjobs__stage}" ]]; then
            echo "checking out ${libjobs__stage} in worktree jobs_stage/"
            git checkout ${jobs_stage} || { >&2 echo "KO 60594 Problem checking out ${jobs_stage} in worktree jobs_stage/"; exit 1; }
        fi
    popd > /dev/null
}

libdevtool__ensure_io_worktrees() {
    libdevtool__ensure_ref
    libdevtool__ensure_stage
}

libdevtool__init() {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        local key value
        if [ -f .git ] && grep -q "gitdir: .*worktrees" .git; then
            libdevtool__root_worktree=$(grep "gitdir: .*worktrees" .git | head -n1 | awk '{ print $2 }' | sed 's~\(.*\)/\.git/.*~\1~')
            while read -r key value; do
                if [[ "$key" == "worktree" ]]; then
                    libdevtool__worktree=${value}
                elif [[ "$key" == "HEAD" ]]; then
                    libdevtool__head=${value}
                elif [[ "$key" == "branch" ]]; then
                    libdevtool__branch=$(echo "${value}" | sed 's~refs/heads/~~')
                else
                    >&2 echo "KO 76093 unknown key $key"
                    exit 1
                fi
            done < <(git worktree list --porcelain | grep "$(pwd)\$" -A2)
        else
            libdevtool__root_worktree=$(pwd)
            while read -r key value; do
                if [[ "$key" == "worktree" ]]; then
                    libdevtool__worktree=${value}
                elif [[ "$key" == "HEAD" ]]; then
                    libdevtool__head=${value}
                elif [[ "$key" == "branch" ]]; then
                    libdevtool__branch=$(echo "${value}" | sed 's~refs/heads/~~')
                else
                    >&2 echo "KO 76094 unknown key $key"
                    exit 1
                fi
            done < <(git worktree list --porcelain | grep "$(pwd)\$" -A2)
        fi
    else
            >&2 echo "KO 44039 Not inside a Git repository"
            exit 1
    fi
    . lib/libconfigure.env
    . lib/r2r/libr2r_cto2dev.env
    . lib/r2r/libr2r_dev2dev.env
    . lib/libjobs.env
    libdevtool__init__home
    stcfg__init libdevtool ${dev_datadir}/config
    libdevtool__init2
    local ref="${merger_branch}"
    local main="${dev_branch}"
    local stage="${stage_branch}"

    libjobs__init "${ref}" "${stage}" "${main}" "${libdevtool__root_worktree}" "${libdevtool__worktree}"
    libdevtool__ensure_io_worktrees
}

libdevtool__cleanup() {
    libconfigure__cleanup
}

